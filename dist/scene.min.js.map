{"version":3,"file":"scene.min.js","sources":["../src/easing.ts","../src/consts.ts","../src/EventTrigger.ts","../src/PropertyObject.ts","../src/utils/property.ts","../src/utils.ts","../src/Animator.ts","../src/Frame.ts","../src/utils/dot.ts","../src/SceneItem.ts","../src/Scene.ts","../src/presets.ts","../src/index.umd.ts"],"sourcesContent":["import { EasingFunction } from \"./types\";\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: EasingFunction = (x: number) => {\n    const t = solveFromX(x1, x2, Math.max(Math.min(1, x), 0));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: EasingFunction = (time: number) => {\n    const level = 1 / count;\n\n    if (time >= 1) {\n      return 1;\n    }\n    return (position === \"start\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","import { IObject } from \"@daybrush/utils\";\nimport { RoleObject, OptionType, EventType, EasingFunction } from \"./types\";\nimport { EASE, EASE_IN, EASE_IN_OUT, LINEAR, EASE_OUT, STEP_START, STEP_END } from \"./easing\";\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const DATA_SCENE_ID = \"data-scene-id\";\nexport const TIMING_FUNCTION = \"animation-timing-function\";\nexport const ROLES: RoleObject = { transform: {}, filter: {}, attribute: {}, html: true };\nexport const ALIAS: IObject<string[]> = { easing: [TIMING_FUNCTION] };\nexport const FIXED = { [TIMING_FUNCTION]: true, contents: true, html: true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const PLAY_CSS = \"playCSS\";\nexport const PREV_TIME = \"prevTime\";\nexport const TICK_TIME = \"tickTime\";\nexport const CURRENT_TIME = \"currentTime\";\nexport const SELECTOR = \"selector\";\nexport const TRANSFORM_NAME = \"transform\";\nexport const EASINGS = {\n    \"linear\": LINEAR,\n    \"ease\": EASE,\n    \"ease-in\": EASE_IN,\n    \"ease-out\": EASE_OUT,\n    \"ease-in-out\": EASE_IN_OUT,\n    \"step-start\": STEP_START,\n    \"step-end\": STEP_END,\n};\nexport const NAME_SEPARATOR = \"_///_\";\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {$ts:OptionType}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {$ts:EventType}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n","import { isObject, isArray, toArray } from \"@daybrush/utils\";\nimport { CallbackType, EventParameter } from \"./types\";\n\n/**\n* attach and trigger event handlers.\n*/\nclass EventTrigger {\n    public events: { [name: string]: CallbackType[] };\n    /**\n      * @example\n  const et = new Scene.EventTrigger();\n  const scene = new Scene();\n\n  scene.on(\"call\", e => {\n      console.log(e.param);\n  });\n  et.on(\"call\", e => {\n      console.log(e.param);\n  });\n  scene.trigger(\"call\", {param: 1});\n  et.trigger(\"call\", {param: 1});\n       */\n    constructor() {\n        this.events = {};\n    }\n    public _on(name: string | EventParameter, callback?: CallbackType | CallbackType[], once?: boolean) {\n        const events = this.events;\n\n        if (isObject(name)) {\n            for (const n in name) {\n                this._on(n, name[n], once);\n            }\n            return;\n        }\n        if (!(name in events)) {\n            events[name] = [];\n        }\n        if (!callback) {\n            return;\n        }\n        if (isArray(callback)) {\n            callback.forEach(func => this._on(name, func, once));\n            return;\n        }\n        events[name].push(once ? function callback2(...args) {\n            callback(...args);\n            this.off(name, callback2);\n        } : callback);\n    }\n    /**\n      * Attach an event handler function for one or more events to target\n      * @param - event's name\n      * @param - function to execute when the event is triggered.\n      * @return {EventTrigger} An Instance itself.\n      * @example\n  target.on(\"animate\", function() {\n      console.log(\"animate\");\n  });\n\n  target.trigger(\"animate\");\n\n    */\n    public on(name: string | EventParameter, callback?: CallbackType | CallbackType[]) {\n        this._on(name, callback);\n        return this;\n    }\n    /**\n      * Dettach an event handler function for one or more events to target\n      * @param - event's name\n      * @param -  function to execute when the event is triggered.\n      * @return {EventTrigger} An Instance itself.\n      * @example\n  const callback = function() {\n      console.log(\"animate\");\n  };\n  target.on(\"animate\", callback);\n\n  target.off(\"animate\", callback);\n  target.off(\"animate\");\n\n      */\n    public off(name?: string, callback?: CallbackType) {\n        if (!name) {\n            this.events = {};\n        } else if (!callback) {\n            this.events[name] = [];\n        } else {\n            const callbacks = this.events[name];\n\n            if (!callbacks) {\n                return this;\n            }\n            const index = callbacks.indexOf(callback);\n\n            if (index !== -1) {\n                callbacks.splice(index, 1);\n            }\n        }\n        return this;\n    }\n    /**\n      * execute event handler\n      * @param - event's name\n      * @param - event handler's additional parameter\n      * @return {EventTrigger} An Instance itself.\n      * @example\n  target.on(\"animate\", function(a1, a2) {\n      console.log(\"animate\", a1, a2);\n  });\n\n  target.trigger(\"animate\", [1, 2]); // log => \"animate\", 1, 2\n\n      */\n    public trigger(name: string, ...data: any[]) {\n        const events = this.events;\n\n        if (!(name in events)) {\n            return this;\n        }\n\n        const args = data || [];\n\n        !args[0] && (args[0] = {});\n        const event = events[name];\n        const target = args[0];\n\n        target.type = name;\n        target.currentTarget = this;\n        !target.target && (target.target = this);\n        toArray(events[name]).forEach(callback => {\n            callback.apply(this, data);\n        });\n\n        return this;\n    }\n    public once(name: string | EventParameter, callback?: CallbackType | CallbackType[]) {\n        this._on(name, callback, true);\n        return this;\n    }\n}\nexport default EventTrigger;\n","import { isString } from \"@daybrush/utils\";\nimport { PropertyObjectState } from \"./types\";\n\n/**\n* Make string, array to PropertyObject for the dot product\n*/\nclass PropertyObject implements PropertyObjectState {\n    public value: any[];\n    public prefix: string = \"\";\n    public suffix: string = \"\";\n    public model: string = \"\";\n    public type: string = \"\";\n    public separator: string = \",\";\n\n    /**\n      * @param - This value is in the array format.\n      * @param - options\n      * @example\n  var obj = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\"\n  });\n       */\n    constructor(value: string | any[], options?: Partial<PropertyObjectState>) {\n        options && this.setOptions(options);\n        this.value = isString(value) ? value.split(this.separator) : value;\n    }\n    public setOptions(newOptions: Partial<PropertyObjectState>) {\n        for (const name in newOptions) {\n            this[name as keyof PropertyObjectState] = newOptions[name as keyof PropertyObjectState];\n        }\n        return this;\n    }\n    /**\n      * the number of values.\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n\n  console.log(obj1.length);\n  // 3\n       */\n    public size() {\n        return this.value.length;\n    }\n    /**\n      * retrieve one of values at the index\n      * @param {Number} index - index\n      * @return {Object} one of values at the index\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n\n  console.log(obj1.get(0));\n  // 1\n       */\n    public get(index: number) {\n        return this.value[index];\n    }\n    /**\n      * Set the value at that index\n      * @param {Number} index - index\n      * @param {Object} value - text, a number, object to set\n      * @return {PropertyObject} An instance itself\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  obj1.set(0, 2);\n  console.log(obj1.toValue());\n  // 2,2,3\n       */\n    public set(index: number, value: any) {\n        this.value[index] = value;\n        return this;\n    }\n    /**\n      * create a copy of an instance itself.\n      * @return {PropertyObject} clone\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  const obj2 = obj1.clone();\n       */\n    public clone(): PropertyObject {\n        const {\n            separator,\n            prefix,\n            suffix,\n            model,\n            type,\n        } = this;\n        const arr = this.value.map(v => ((v instanceof PropertyObject) ? v.clone() : v));\n        return new PropertyObject(arr, {\n            separator,\n            prefix,\n            suffix,\n            model,\n            type,\n        });\n    }\n    /**\n      * Make Property Object to String\n      * @return {String} Make Property Object to String\n      * @example\n  //rgba(100, 100, 100, 0.5)\n  const obj4 = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\",\n  });\n  console.log(obj4.toValue());\n  // \"rgba(100,100,100,0.5)\"\n      */\n    public toValue(): string {\n        return this.prefix + this.join() + this.suffix;\n    }\n    /**\n      * Make Property Object's array to String\n      * @return {String} Join the elements of an array into a string\n      * @example\n      //rgba(100, 100, 100, 0.5)\n      var obj4 = new PropertyObject([100,100,100,0.5], {\n          \"separator\" : \",\",\n          \"prefix\" : \"rgba(\",\n          \"suffix\" : \")\"\n      });\n      obj4.join();  // =>   \"100,100,100,0.5\"\n       */\n    public join() {\n        return this.value.map(v => ((v instanceof PropertyObject) ? v.toValue() : v)).join(this.separator);\n    }\n    /**\n      * executes a provided function once per array element.\n      * @param {Function} callback - Function to execute for each element, taking three arguments\n      * @param {All} [callback.currentValue] The current element being processed in the array.\n      * @param {Number} [callback.index] The index of the current element being processed in the array.\n      * @param {Array} [callback.array] the array.\n      * @return {PropertyObject} An instance itself\n      * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n      * @example\n  //rgba(100, 100, 100, 0.5)\n  var obj4 = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\"\n  });\n\n  obj4.forEach(t => {\n      console.log(t);\n  });  // =>   \"100,100,100,0.5\"\n      */\n    public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n        this.value.forEach(func);\n        return this;\n    }\n}\nexport default PropertyObject;\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport {\n    COLOR_MODELS, isString,\n    splitComma, splitSpace, stringToRGBA,\n    RGBA, splitBracket, IObject, isArray, splitText\n} from \"@daybrush/utils\";\nimport { NameType } from \"../types\";\n\nexport function splitStyle(str: string) {\n\n    const properties = splitText(str, \";\");\n    const obj: IObject<string | PropertyObject> = {};\n    const totalLength = properties.length;\n    let length = totalLength;\n\n    for (let i = 0; i < totalLength; ++i) {\n        const matches = splitText(properties[i], \":\");\n\n        if (matches.length < 2 || !matches[1]) {\n            --length;\n            continue;\n        }\n        obj[matches[0].trim()] = toPropertyObject(matches[1].trim());\n    }\n    return { styles: obj, length };\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n    const model = RGBA;\n\n    if (arr.length === 3) {\n        arr[3] = 1;\n    }\n    return new PropertyObject(arr, {\n        model,\n        separator: \",\",\n        type: \"color\",\n        prefix: `${model}(`,\n        suffix: \")\",\n    });\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(text: string) {\n    // [prefix, value, other]\n    const { prefix: model, value, suffix: afterModel } = splitBracket(text);\n\n    if (typeof value === \"undefined\") {\n        return text;\n    }\n    if (COLOR_MODELS.indexOf(model) > -1) {\n        return arrayToColorObject(stringToRGBA(text));\n    }\n    // divide comma(,)\n    const obj = toPropertyObject(value, model);\n\n    let arr = [value];\n    let separator = \",\";\n    let prefix = `${model}(`;\n    let suffix = `)${afterModel}`;\n\n    if (obj instanceof PropertyObject) {\n        separator = obj.separator;\n        arr = obj.value;\n        prefix += obj.prefix;\n        suffix = obj.suffix + suffix;\n    }\n    return new PropertyObject(arr, {\n        separator,\n        model,\n        prefix,\n        suffix,\n    });\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n    return new PropertyObject(arr, {\n        type: \"array\",\n        separator,\n    });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n    const result = stringToRGBA(value);\n\n    return result ? arrayToColorObject(result) : value;\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: any[], model?: NameType): PropertyObject;\nexport function toPropertyObject(value: IObject<any>, model?: NameType): IObject<any>;\nexport function toPropertyObject(value: string, model?: NameType): PropertyObject | string;\nexport function toPropertyObject(value: string | IObject<any> | any[], model?: NameType) {\n    if (!isString(value)) {\n        if (isArray(value)) {\n            return arrayToPropertyObject(value, \",\");\n        }\n        return value;\n    }\n    let values: any = splitComma(value);\n\n    if (values.length > 1) {\n        return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n    }\n    values = splitSpace(value);\n\n    if (values.length > 1) {\n        return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n    }\n    values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n\n    if (values && values[1] === values[3]) {\n        // Quotes\n        return new PropertyObject([toPropertyObject(values[2])], {\n            prefix: values[1],\n            suffix: values[1],\n        });\n    } else if (value.indexOf(\"(\") !== -1) {\n        // color\n        return stringToBracketObject(value);\n    } else if (value.charAt(0) === \"#\" && model !== \"url\") {\n        return stringToColorObject(value);\n    }\n    return value;\n}\nexport function toObject(object: PropertyObject, result: IObject<any> = {}) {\n    const model = object.model;\n\n    if (model) {\n        object.setOptions({\n            model: \"\",\n            suffix: \"\",\n            prefix: \"\",\n        });\n        const value = object.size() > 1 ? object : object.get(0);\n\n        result[model] = value;\n    } else {\n        object.forEach(obj => {\n            toObject(obj, result);\n        });\n    }\n    return result;\n}\n","import {\n    ROLES, MAXIMUM, FIXED, ALIAS,\n    PAUSED, RUNNING, PLAY, ENDED, PREFIX, PLAY_CSS, CURRENT_TIME, START_ANIMATION, EASINGS, NAME_SEPARATOR\n} from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport {\n    isArray, ANIMATION, ARRAY, OBJECT,\n    PROPERTY, STRING, NUMBER, IS_WINDOW, IObject, $, document, isObject, addEvent, removeEvent, isString,\n} from \"@daybrush/utils\";\nimport { EasingType, EasingFunction, NameType } from \"./types\";\nimport { toPropertyObject } from \"./utils/property\";\nimport { bezier, steps } from \"./easing\";\n\nexport function isPropertyObject(value: any): value is PropertyObject {\n    return value instanceof PropertyObject;\n}\nexport function setAlias(name: string, alias: string[]) {\n    ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n    const length = names.length;\n    let roles: any = ROLES;\n    let fixed: any = FIXED;\n\n    for (let i = 0; i < length - 1; ++i) {\n        !roles[names[i]] && (roles[names[i]] = {});\n        roles = roles[names[i]];\n        if (isFixedProperty) {\n            !fixed[names[i]] && (fixed[names[i]] = {});\n            fixed = fixed[names[i]];\n        }\n    }\n    isFixedProperty && (fixed[names[length - 1]] = true);\n    roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n    const type = typeof value;\n\n    if (type === OBJECT) {\n        if (isArray(value)) {\n            return ARRAY;\n        } else if (isPropertyObject(value)) {\n            return PROPERTY;\n        }\n    } else if (type === STRING || type === NUMBER) {\n        return \"value\";\n    }\n    return type;\n}\nexport function isPureObject(obj: any): obj is object {\n    return isObject(obj) && obj.constructor === Object;\n}\nexport function getNames(names: IObject<any>, stack: string[]) {\n    let arr: string[][] = [];\n\n    if (isPureObject(names)) {\n        for (const name in names) {\n            stack.push(name);\n            arr = arr.concat(getNames(names[name], stack));\n            stack.pop();\n        }\n    } else {\n        arr.push(stack.slice());\n    }\n    return arr;\n}\nexport function updateFrame(names: IObject<any>, properties: IObject<any>) {\n    for (const name in properties) {\n        const value = properties[name];\n\n        if (!isPureObject(value)) {\n            names[name] = true;\n            continue;\n        }\n        if (!isObject(names[name])) {\n            names[name] = {};\n        }\n        updateFrame(names[name], properties[name]);\n    }\n    return names;\n}\nexport function toFixed(num: number) {\n    return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function getValueByNames(\n    names: Array<string | number>,\n    properties: IObject<any>, length: number = names.length) {\n    let value = properties;\n\n    for (let i = 0; i < length; ++i) {\n        if (!isObject(value) || value == null) {\n            return undefined;\n        }\n        value = value[names[i]];\n    }\n    return value;\n}\nexport function isInProperties(roles: IObject<any>, args: NameType[], isCheckTrue?: boolean) {\n    const length = args.length;\n    let role: any = roles;\n\n    if (length === 0) {\n        return false;\n    }\n    for (let i = 0; i < length; ++i) {\n        if (role === true) {\n            return false;\n        }\n        role = role[args[i]];\n        if (!role || (!isCheckTrue && role === true)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isRole(args: NameType[], isCheckTrue?: boolean) {\n    return isInProperties(ROLES, args, isCheckTrue);\n}\nexport function isFixed(args: NameType[]) {\n    return isInProperties(FIXED, args, true);\n}\n\nexport interface IterationInterface {\n    currentTime: number;\n    iterationCount: number;\n    elapsedTime: number;\n}\nexport function setPlayCSS(item: Scene | SceneItem, isActivate: boolean) {\n    item.state[PLAY_CSS] = isActivate;\n}\nexport function isPausedCSS(item: Scene | SceneItem) {\n    return item.state[PLAY_CSS] && item.isPaused();\n}\nexport function isEndedCSS(item: Scene | SceneItem) {\n    return !item.isEnded() && item.state[PLAY_CSS];\n}\n\nexport function makeId(selector?: boolean) {\n    for (; ;) {\n        const id = `${Math.floor(Math.random() * 10000000)}`;\n\n        if (!IS_WINDOW || !selector) {\n            return id;\n        }\n        const checkElement = $(`[data-scene-id=\"${id}\"]`);\n\n        if (!checkElement) {\n            return id;\n        }\n    }\n}\nexport function getRealId(item: Scene | SceneItem) {\n    return item.getId() || item.setId(makeId(false)).getId();\n}\nexport function toId(text: number | string) {\n    return `${text}`.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nexport function playCSS(\n    item: Scene | SceneItem, isExportCSS?: boolean,\n    playClassName?: string, properties: object = {}) {\n    if (!ANIMATION || item.getPlayState() === RUNNING) {\n        return;\n    }\n    const className = playClassName || START_ANIMATION;\n\n    if (isPausedCSS(item)) {\n        item.addPlayClass(true, className, properties);\n    } else {\n        if (item.isEnded()) {\n            item.setTime(0);\n        }\n        isExportCSS && item.exportCSS({ className });\n        const el = item.addPlayClass(false, className, properties);\n\n        if (!el) {\n            return;\n        }\n        addAnimationEvent(item, el);\n        setPlayCSS(item, true);\n    }\n    item.setPlayState(RUNNING);\n}\n\nexport function addAnimationEvent(item: Scene | SceneItem, el: Element) {\n    const state = item.state;\n    const duration = item.getDuration();\n    const isZeroDuration = !duration || !isFinite(duration);\n    const animationend = () => {\n        setPlayCSS(item, false);\n        item.finish();\n    };\n    const animationstart = () => {\n        item.trigger(PLAY);\n\n        addEvent(el, \"animationcancel\", animationend);\n        addEvent(el, \"animationend\", animationend);\n        addEvent(el, \"animationiteration\", animationiteration);\n    };\n    item.once(ENDED, () => {\n        removeEvent(el, \"animationcancel\", animationend);\n        removeEvent(el, \"animationend\", animationend);\n        removeEvent(el, \"animationiteration\", animationiteration);\n        removeEvent(el, \"animationstart\", animationstart);\n    });\n    const animationiteration = ({ elapsedTime }: any) => {\n        const currentTime = elapsedTime;\n        const iterationCount = isZeroDuration ? 0 : (currentTime / duration);\n\n        state[CURRENT_TIME] = currentTime;\n        item.setIteration(iterationCount);\n    };\n    addEvent(el, \"animationstart\", animationstart);\n}\n\nexport function getEasing(curveArray: string | number[] | EasingFunction): EasingType {\n    let easing: EasingType;\n\n    if (isString(curveArray)) {\n        if (curveArray in EASINGS) {\n            easing = EASINGS[curveArray];\n        } else {\n            const obj = toPropertyObject(curveArray);\n\n            if (isString(obj)) {\n                return 0;\n            } else {\n                if (obj.model === \"cubic-bezier\") {\n                    curveArray = obj.value.map(v => parseFloat(v));\n                    easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n                } else if (obj.model === \"steps\") {\n                    easing = steps(parseFloat(obj.value[0]), obj.value[1]);\n                } else {\n                    return 0;\n                }\n            }\n        }\n    } else if (isArray(curveArray)) {\n        easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n    } else {\n        easing = curveArray;\n    }\n\n    return easing;\n}\n\nexport function getFullName(names: NameType[]) {\n    return names.join(NAME_SEPARATOR);\n}\n","import {\n    THRESHOLD,\n    ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n    ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n    DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED,\n    RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE, PREV_TIME, TICK_TIME, CURRENT_TIME, ITERATION, OPTIONS, EASINGS\n} from \"./consts\";\nimport EventTrigger from \"./EventTrigger\";\nimport { bezier, steps } from \"./easing\";\nimport { toFixed, getEasing } from \"./utils\";\nimport { splitUnit, isString, camelize, requestAnimationFrame, isArray, cancelAnimationFrame } from \"@daybrush/utils\";\nimport {\n    IterationCountType, DirectionType, AnimatorState,\n    EasingFunction, FillModeType, PlayStateType, EasingType, AnimatorOptions,\n} from \"./types\";\nimport { toPropertyObject } from \"./utils/property\";\n\nfunction GetterSetter<T extends new (...args: any[]) => {}>(\n    getter: string[], setter: string[], parent: string) {\n    return (constructor: T) => {\n        const prototype = constructor.prototype;\n\n        getter.forEach(name => {\n            prototype[camelize(`get ${name}`)] = function() {\n                return this[parent][name];\n            };\n        });\n        setter.forEach(name => {\n            prototype[camelize(`set ${name}`)] = function(value: any) {\n                this[parent][name] = value;\n                return this;\n            };\n        });\n    };\n}\nexport function isDirectionReverse(iteration: number, iteraiontCount: IterationCountType, direction: DirectionType) {\n    if (direction === REVERSE) {\n        return true;\n    } else if (iteraiontCount !== INFINITE && iteration === iteraiontCount && iteraiontCount % 1 === 0) {\n        return direction === (iteration % 2 >= 1 ? ALTERNATE_REVERSE : ALTERNATE);\n    }\n    return direction === (iteration % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorState The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n\nconst setters = [\"id\", ITERATION_COUNT, DELAY, FILL_MODE,\n    DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nconst getters = [...setters, EASING, EASING_NAME];\n\n/**\n* play video, animation, the others\n* @extends EventTrigger\n* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n*/\n@GetterSetter(getters, setters, \"state\")\nclass Animator\n    <T extends AnimatorOptions = AnimatorOptions, U extends AnimatorState = AnimatorState> extends EventTrigger {\n    public state: U;\n    private timerId: number = 0;\n\n    /**\n     * @param - animator's options\n     * @example\n  const animator = new Animator({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.easing.EASE,\n  });\n     */\n    constructor(options?: Partial<T & AnimatorOptions>) {\n        super();\n        this.state = {\n            id: \"\",\n            easing: 0,\n            easingName: \"linear\",\n            iterationCount: 1,\n            delay: 0,\n            fillMode: \"forwards\",\n            direction: NORMAL,\n            playSpeed: 1,\n            currentTime: 0,\n            iterationTime: -1,\n            iteration: 0,\n            tickTime: 0,\n            prevTime: 0,\n            playState: PAUSED,\n            duration: 0,\n        } as U;\n        this.setOptions(options);\n    }\n    /**\n      * set animator's easing.\n      * @param curverArray - The speed curve of an animation.\n      * @return {Animator} An instance itself.\n      * @example\n  animator.({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.easing.EASE,\n  });\n      */\n    public setEasing(curveArray: string | number[] | EasingFunction): this {\n        const easing: EasingType = getEasing(curveArray);\n        const easingName = easing && easing[EASING_NAME] || \"linear\";\n        const state = this.state;\n\n        state[EASING] = easing;\n        state[EASING_NAME] = easingName;\n        return this;\n    }\n    /**\n      * set animator's options.\n      * @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n      * @param - animator's options\n      * @return {Animator} An instance itself.\n      * @example\n  animator.({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.eaasing.EASE,\n  });\n      */\n    public setOptions(options: Partial<AnimatorOptions> = {}): this {\n        for (const name in options) {\n            const value = options[name];\n\n            if (name === EASING) {\n                this.setEasing(value);\n                continue;\n            } else if (name === DURATION) {\n                value && this.setDuration(value);\n                continue;\n            }\n            if (OPTIONS.indexOf(name as any) > -1) {\n                this.state[name] = value;\n            }\n        }\n\n        return this;\n    }\n    /**\n      * Get the animator's total duration including delay\n      * @return {number} Total duration\n      * @example\n  animator.getTotalDuration();\n      */\n    public getTotalDuration(): number {\n        return this.getActiveDuration(true);\n    }\n    /**\n      * Get the animator's total duration excluding delay\n      * @return {number} Total duration excluding delay\n      * @example\n  animator.getActiveDuration();\n      */\n    public getActiveDuration(delay?: boolean): number {\n        const state = this.state;\n        const count = state[ITERATION_COUNT];\n        if (count === INFINITE) {\n            return Infinity;\n        }\n        return (delay ? state[DELAY] : 0) + this.getDuration() * count;\n    }\n    /**\n      * Check if the animator has reached the end.\n      * @return {boolean} ended\n      * @example\n  animator.isEnded(); // true or false\n      */\n    public isEnded(): boolean {\n        if (this.state[TICK_TIME] === 0 && this.state[PLAY_STATE] === PAUSED) {\n            return true;\n        } else if (this.getTime() < this.getActiveDuration()) {\n            return false;\n        }\n        return true;\n    }\n    /**\n      *Check if the animator is paused:\n      * @return {boolean} paused\n      * @example\n  animator.isPaused(); // true or false\n      */\n    public isPaused(): boolean {\n        return this.state[PLAY_STATE] === PAUSED;\n    }\n    public start(delay: number = this.state[DELAY]): boolean {\n        const state = this.state;\n\n        state[PLAY_STATE] = RUNNING;\n        if (state[TICK_TIME] >= delay) {\n            /**\n             * This event is fired when play animator.\n             * @event Animator#play\n             */\n            this.trigger(PLAY);\n            return true;\n        }\n        return false;\n    }\n    /**\n      * play animator\n      * @return {Animator} An instance itself.\n      */\n    public play(toTime?: number) {\n        const state = this.state;\n        const delay = state[DELAY];\n        const currentTime = this.getTime();\n\n        state[PLAY_STATE] = RUNNING;\n\n        if (this.isEnded() && (currentTime === 0 || currentTime >= this.getActiveDuration())) {\n            this.setTime(-delay, true);\n        }\n\n        this.timerId = requestAnimationFrame((time: number) => {\n            state[PREV_TIME] = time;\n            this.tick(time, toTime);\n        });\n        this.start();\n        return this;\n    }\n    /**\n      * pause animator\n      * @return {Animator} An instance itself.\n      */\n    public pause(): this {\n        const state = this.state;\n\n        if (state[PLAY_STATE] !== PAUSED) {\n            state[PLAY_STATE] = PAUSED;\n            /**\n             * This event is fired when animator is paused.\n             * @event Animator#paused\n             */\n            this.trigger(PAUSED);\n        }\n        cancelAnimationFrame(this.timerId);\n        return this;\n    }\n    /**\n       * end animator\n       * @return {Animator} An instance itself.\n      */\n    public finish() {\n        this.setTime(0);\n        this.state[TICK_TIME] = 0;\n        this.end();\n        return this;\n    }\n    /**\n       * end animator\n       * @return {Animator} An instance itself.\n      */\n    public end() {\n        this.pause();\n        /**\n             * This event is fired when animator is ended.\n             * @event Animator#ended\n             */\n        this.trigger(ENDED);\n        return this;\n    }\n    /**\n      * set currentTime\n      * @param {Number|String} time - currentTime\n      * @return {Animator} An instance itself.\n      * @example\n\n  animator.setTime(\"from\"); // 0\n  animator.setTime(\"to\"); // 100%\n  animator.setTime(\"50%\");\n  animator.setTime(10);\n  animator.getTime() // 10\n      */\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean) {\n        const activeDuration = this.getActiveDuration();\n        const state = this.state;\n        const prevTime = state[TICK_TIME];\n        const delay = state[DELAY];\n        let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n        state[TICK_TIME] = delay + currentTime;\n        if (currentTime < 0) {\n            currentTime = 0;\n        } else if (currentTime > activeDuration) {\n            currentTime = activeDuration;\n        }\n        state[CURRENT_TIME] = currentTime;\n        this.calculate();\n\n        if (isTick && !isParent) {\n            const tickTime = state[TICK_TIME];\n\n            if (prevTime < delay && time >= 0) {\n                this.start(0);\n            }\n            if (tickTime < prevTime || this.isEnded()) {\n                this.end();\n                return;\n            }\n        }\n        if (this.isDelay()) {\n            return this;\n        }\n        /**\n             * This event is fired when the animator updates the time.\n             * @event Animator#timeupdate\n             * @param {Object} param The object of data to be sent to an event.\n             * @param {Number} param.currentTime The total time that the animator is running.\n             * @param {Number} param.time The iteration time during duration that the animator is running.\n             * @param {Number} param.iterationCount The iteration count that the animator is running.\n             */\n        this.trigger(TIMEUPDATE, {\n            currentTime,\n            time: this.getIterationTime(),\n            iterationCount: state[ITERATION],\n        });\n\n        return this;\n    }\n    /**\n      * Get the animator's current time\n      * @return {number} current time\n      * @example\n  animator.getTime();\n      */\n    public getTime(): number {\n        return this.state[CURRENT_TIME];\n    }\n    public getUnitTime(time: string | number) {\n        if (isString(time)) {\n            const duration = this.getDuration() || 100;\n\n            if (time === \"from\") {\n                return 0;\n            } else if (time === \"to\") {\n                return duration;\n            }\n            const { unit, value } = splitUnit(time);\n\n            if (unit === \"%\") {\n                !this.getDuration() && (this.setDuration(duration));\n                return toFixed(parseFloat(time) / 100 * duration);\n            } else if (unit === \">\") {\n                return value + THRESHOLD;\n            } else {\n                return value;\n            }\n        } else {\n            return toFixed(time);\n        }\n    }\n    /**\n       * Check if the current state of animator is delayed.\n       * @return {boolean} check delay state\n       */\n    public isDelay() {\n        const state = this.state;\n        const delay = state[DELAY];\n        const tickTime = state[TICK_TIME];\n\n        return delay > 0 && (tickTime < delay);\n    }\n    public setIteration(iterationCount: number): this {\n        const state = this.state;\n        const passIterationCount = Math.floor(iterationCount);\n        const maxIterationCount = state[ITERATION_COUNT] === INFINITE ? Infinity : state[ITERATION_COUNT];\n\n        if (state[ITERATION] < passIterationCount && passIterationCount < maxIterationCount) {\n            /**\n                  * The event is fired when an iteration of an animation ends.\n                  * @event Animator#iteration\n                  * @param {Object} param The object of data to be sent to an event.\n                  * @param {Number} param.currentTime The total time that the animator is running.\n                  * @param {Number} param.iterationCount The iteration count that the animator is running.\n                  */\n            this.trigger(\"iteration\", {\n                currentTime: state[CURRENT_TIME],\n                iterationCount: passIterationCount,\n            });\n        }\n        state[ITERATION] = iterationCount;\n        return this;\n    }\n    protected calculate() {\n        const state = this.state;\n        const iterationCount = state[ITERATION_COUNT];\n        const fillMode = state[FILL_MODE];\n        const direction = state[DIRECTION];\n        const duration = this.getDuration();\n        const time = this.getTime();\n        const iteration = duration === 0 ? 0 : time / duration;\n        let currentIterationTime = duration ? time % duration : 0;\n\n        if (!duration) {\n            this.setIterationTime(0);\n            return this;\n        }\n        this.setIteration(iteration);\n\n        // direction : normal, reverse, alternate, alternate-reverse\n        // fillMode : forwards, backwards, both, none\n        const isReverse = isDirectionReverse(iteration, iterationCount, direction);\n\n        const isFiniteDuration = isFinite(duration);\n        if (isFiniteDuration && isReverse) {\n            currentIterationTime = duration - currentIterationTime;\n        }\n        if (isFiniteDuration && iterationCount !== INFINITE) {\n            const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n            // fill forwards\n            if (iteration >= iterationCount) {\n                currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n                isReverse && (currentIterationTime = duration - currentIterationTime);\n            }\n        }\n        this.setIterationTime(currentIterationTime);\n        return this;\n    }\n    private tick(now: number, to?: number) {\n        if (this.isPaused()) {\n            return;\n        }\n        const state = this.state;\n        const playSpeed = state[PLAY_SPEED];\n        const prevTime = state[PREV_TIME];\n        const delay = state[DELAY];\n        const tickTime = state[TICK_TIME];\n        const currentTime = tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n        state[PREV_TIME] = now;\n        this.setTime(currentTime - delay, true);\n        if (to && to * 1000 < now) {\n            this.pause();\n        }\n        if (state[PLAY_STATE] === PAUSED) {\n            return;\n        }\n\n        this.timerId = requestAnimationFrame((time: number) => {\n            this.tick(time, to);\n        });\n    }\n}\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#setId\n * @param {number | string} - String or number of id to be set in the animator\n * @return {Animator} An instance itself.\n */\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#getId\n * @return {number | string} the indicator of the item.\n */\n/**\n * Get a delay for the start of an animation.\n * @method Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Animator#setDelay\n * @param {number} delay - delay\n * @return {Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#getFillMode\n * @return {FillModeType} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#setFillMode\n * @param {FillModeType} fillMode - fillMode\n * @return {Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Animator#getIterationCount\n * @return {IterationCountType} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Animator#setIterationCount\n * @param {IterationCountType} iterationCount - iterationCount\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#getDirection\n * @return {DirectionType} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#setDirection\n * @param {DirectionType} direction - direction\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Animator#getPlayState\n * @return {PlayStateType} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Animator#setPlayState\n * @param {PlayStateType} playState - playState\n * @return {Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Animator#setDuration\n * @param {number} duration - duration\n * @return {Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Animator#getEasing\n * @return {EasingType} easing\n */\n/**\n * Get the speed curve's name\n * @method Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\n// tslint:disable-next-line:interface-name\ninterface Animator<T extends AnimatorOptions = AnimatorOptions, U extends AnimatorState = AnimatorState> {\n    setId(id: number | string): this;\n    getId(): number | string;\n    getIterationTime(): number;\n    setIterationTime(time: number): this;\n    setDelay(delay: number): this;\n    getDelay(): number;\n    setFillMode(fillMode: FillModeType): this;\n    getFillMode(): FillModeType;\n    setIterationCount(iterationCount: IterationCountType): this;\n    getIterationCount(): IterationCountType;\n    setDirection(direction: DirectionType): this;\n    getDirection(): DirectionType;\n    setPlayState(playState: PlayStateType): this;\n    getPlayState(): PlayStateType;\n    setPlaySpeed(playSpeed: number): this;\n    getPlaySpeed(): number;\n    setDuration(duration: number): this;\n    getDuration(): number;\n    getEasing(): EasingType;\n    getEasingName(): string;\n}\nexport default Animator;\n","import {\n    ALIAS, TIMING_FUNCTION, TRANSFORM_NAME, EASING_NAME, NAME_SEPARATOR\n} from \"./consts\";\nimport { isRole, getType, isPropertyObject, getValueByNames, isFixed, getNames, getEasing, getFullName } from \"./utils\";\nimport { toPropertyObject, splitStyle, toObject } from \"./utils/property\";\nimport {\n    isObject, isArray, isString, getKeys,\n    ANIMATION, TRANSFORM, FILTER, PROPERTY, FUNCTION, ARRAY, OBJECT, IObject, isUndefined,\n    sortOrders,\n} from \"@daybrush/utils\";\nimport { NameType, KeyValueChildren } from \"./types\";\nimport OrderMap from \"order-map\";\n\nfunction toInnerProperties(obj: IObject<string>, orders: NameType[] = []) {\n    if (!obj) {\n        return \"\";\n    }\n    const arrObj = [];\n\n    const keys = getKeys(obj);\n\n    sortOrders(keys, orders);\n\n    keys.forEach(name => {\n        arrObj.push(`${name.replace(/\\d$/g, \"\")}(${obj[name]})`);\n    });\n\n    return arrObj.join(\" \");\n}\n\n/* eslint-disable */\nfunction clone(target: IObject<any>, toValue = false) {\n    return merge({}, target, toValue);\n}\nfunction merge(to: IObject<any>, from: IObject<any>, toValue = false) {\n    for (const name in from) {\n        const value = from[name];\n        const type = getType(value);\n\n        if (type === PROPERTY) {\n            to[name] = toValue ? value.toValue() : value.clone();\n        } else if (type === FUNCTION) {\n            to[name] = toValue ? getValue([name], value) : value;\n        } else if (type === ARRAY) {\n            to[name] = value.slice();\n        } else if (type === OBJECT) {\n            if (isObject(to[name]) && !isPropertyObject(to[name])) {\n                merge(to[name], value, toValue);\n            } else {\n                to[name] = clone(value, toValue);\n            }\n        } else {\n            to[name] = from[name];\n        }\n    }\n    return to;\n}\n/* eslint-enable */\n\nfunction getPropertyName(args: NameType[]) {\n    return args[0] in ALIAS ? ALIAS[args[0]] : args;\n}\nfunction getValue(names: NameType[], value: any): any {\n    const type = getType(value);\n\n    if (type === PROPERTY) {\n        return value.toValue();\n    } else if (type === FUNCTION) {\n        if (names[0] !== TIMING_FUNCTION) {\n            return getValue(names, value());\n        }\n    } else if (type === OBJECT) {\n        return clone(value, true);\n    }\n    return value;\n}\n/**\n* Animation's Frame\n*/\nclass Frame {\n    public properties: IObject<any> = {};\n    public orderMap: OrderMap = new OrderMap(NAME_SEPARATOR);\n    /**\n     * @param - properties\n     * @example\n  const frame = new Scene.Frame({\n      display: \"none\"\n      transform: {\n          translate: \"50px\",\n          scale: \"5, 5\",\n      }\n  });\n     */\n    constructor(properties: any = {}) {\n        this.properties = {};\n        // this.orders = [];\n        this.set(properties);\n    }\n    /**\n      * get property value\n      * @param {...Number|String|PropertyObject} args - property name or value\n      * @example\n      frame.get(\"display\") // => \"none\", \"block\", ....\n      frame.get(\"transform\", \"translate\") // => \"10px,10px\"\n      */\n    public get(...args: NameType[]) {\n        const value = this.raw(...args);\n\n        return getValue(getPropertyName(args), value);\n    }\n    /**\n      * get properties orders\n      * @param - property names\n      * @example\n      frame.getOrders([\"display\"]) // => []\n      frame.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      */\n    public getOrders(names: NameType[]): NameType[] | undefined {\n        return this.orderMap.get(names);\n    }\n    /**\n      * set properties orders\n      * @param - property names\n      * @param - orders\n      * @example\n      frame.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      frame.setOrders([\"transform\"], [\"scale\", \"tralsate\"])\n      */\n    public setOrders(names: NameType[], orders: NameType[]): NameType[] {\n        return this.orderMap.set(names, orders);\n    }\n    public setOrderObject(obj: IObject<NameType[]>) {\n        this.orderMap.setObject(obj);\n    }\n\n    /**\n      * get property keys\n      * @param - property names\n      * @example\n      frame.gets(\"display\") // => []\n      frame.gets(\"transform\") // => [\"translate\"]\n      */\n    public getKeys(...args: NameType[]): string[] {\n        const value = this.raw(...args);\n        const keys = getType(value) === OBJECT ? getKeys(value) : [];\n\n        sortOrders(keys, this.orderMap.get(args));\n        return keys;\n    }\n    /**\n      * get properties array\n      * @param - property names\n      * @example\n      frame.gets(\"display\") // => []\n      frame.gets(\"transform\") // => [{ key: \"translate\", value: \"10px, 10px\", children: [] }]\n      */\n    public gets(...args: NameType[]): KeyValueChildren[] {\n        const values = this.get(...args);\n        const keys = this.getKeys(...args);\n\n        return keys.map(key => {\n            const nextValue = values[key];\n            return { key, value: nextValue, children: this.gets(...args, key) };\n        });\n    }\n\n    public raw(...args: NameType[]) {\n        return getValueByNames(getPropertyName(args), this.properties);\n    }\n    /**\n      * remove property value\n      * @param {...String} args - property name\n      * @return {Frame} An instance itself\n      * @example\n      frame.remove(\"display\")\n      */\n    public remove(...args: NameType[]) {\n        const params = getPropertyName(args);\n        const length = params.length;\n\n        if (!length) {\n            return this;\n        }\n        this.orderMap.remove(params);\n        const value = getValueByNames(params, this.properties, length - 1);\n\n        if (isObject(value)) {\n            delete value[params[length - 1]];\n        }\n        return this;\n    }\n    /**\n      * set property\n      * @param {...Number|String|PropertyObject} args - property names or values\n      * @return {Frame} An instance itself\n      * @example\n  // one parameter\n  frame.set({\n      display: \"none\",\n      transform: {\n          translate: \"10px, 10px\",\n          scale: \"1\",\n      },\n      filter: {\n          brightness: \"50%\",\n          grayscale: \"100%\"\n      }\n  });\n\n  // two parameters\n  frame.set(\"transform\", {\n      translate: \"10px, 10px\",\n      scale: \"1\",\n  });\n\n  // three parameters\n  frame.set(\"transform\", \"translate\", \"50px\");\n    */\n    public set(...args: any[]) {\n        const self = this;\n        const length = args.length;\n        const params = args.slice(0, -1);\n        const value = args[length - 1];\n        const firstParam = params[0];\n\n        if (length === 1 && value instanceof Frame) {\n            self.merge(value);\n        } else if (firstParam in ALIAS) {\n            self._set(ALIAS[firstParam], value);\n        } else if (length === 2 && isArray(firstParam)) {\n            self._set(firstParam, value);\n        } else if (isPropertyObject(value)) {\n            if (isRole(params)) {\n                self.set(...params, toObject(value));\n            } else {\n                self._set(params, value);\n            }\n        } else if (isArray(value)) {\n            self._set(params, value);\n        } else if (isObject(value)) {\n            if (!self.has(...params) && isRole(params)) {\n                self._set(params, {});\n            }\n            for (const name in value) {\n                self.set(...params, name, value[name]);\n            }\n        } else if (isString(value)) {\n            if (isRole(params, true)) {\n                if (isFixed(params) || !isRole(params)) {\n                    this._set(params, value);\n                } else {\n                    const obj = toPropertyObject(value);\n\n                    if (isObject(obj)) {\n                        self.set(...params, obj);\n                    }\n                }\n                return this;\n            } else {\n                const { styles, length: stylesLength } = splitStyle(value);\n\n                for (const name in styles) {\n                    self.set(...params, name, styles[name]);\n                }\n                if (stylesLength) {\n                    return this;\n                }\n            }\n            self._set(params, value);\n        } else {\n            self._set(params, value);\n        }\n        return self;\n    }\n    /**\n      * Gets the names of properties.\n      * @return the names of properties.\n      * @example\n  // one parameter\n  frame.set({\n      display: \"none\",\n      transform: {\n          translate: \"10px, 10px\",\n          scale: \"1\",\n      },\n  });\n\n  // [[\"display\"], [\"transform\", \"translate\"], [\"transform\", \"scale\"]]\n  console.log(frame.getNames());\n    */\n    public getNames(): string[][] {\n        return getNames(this.properties, []);\n    }\n    /**\n      * check that has property.\n      * @param {...String} args - property name\n      * @example\n      frame.has(\"property\", \"display\") // => true or false\n      */\n    public has(...args: NameType[]) {\n        const params = getPropertyName(args);\n        const length = params.length;\n\n        if (!length) {\n            return false;\n        }\n        return !isUndefined(getValueByNames(params, this.properties, length));\n    }\n    /**\n      * clone frame.\n      * @return {Frame} An instance of clone\n      * @example\n      frame.clone();\n      */\n    public clone() {\n        const frame = new Frame();\n\n        frame.setOrderObject(this.orderMap.orderMap);\n        return frame.merge(this);\n    }\n    /**\n      * merge one frame to other frame.\n      * @param - target frame.\n      * @return {Frame} An instance itself\n      * @example\n      frame.merge(frame2);\n      */\n    public merge(frame: Frame) {\n        const properties = this.properties;\n        const frameProperties = frame.properties;\n\n        if (frameProperties) {\n            merge(properties, frameProperties);\n        }\n        return this;\n    }\n    /**\n      * Specifies an css object that coverted the frame.\n      * @return {object} cssObject\n      */\n    public toCSSObject() {\n        const properties = this.get();\n        const cssObject: IObject<string> = {};\n\n        for (const name in properties) {\n            if (isRole([name], true)) {\n                continue;\n            }\n            const value = properties[name];\n\n            if (name === TIMING_FUNCTION) {\n                cssObject[TIMING_FUNCTION.replace(\"animation\", ANIMATION)] =\n                    (isString(value) ? value : value[EASING_NAME]) || \"initial\";\n            } else {\n                cssObject[name] = value;\n            }\n        }\n        const transform = toInnerProperties(properties[TRANSFORM_NAME], this.orderMap.get([TRANSFORM_NAME]));\n        const filter = toInnerProperties(properties.filter, this.orderMap.get([FILTER]));\n\n        TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n        FILTER && filter && (cssObject[FILTER] = filter);\n        return cssObject;\n    }\n    /**\n      * Specifies an css text that coverted the frame.\n      * @return {string} cssText\n      */\n    public toCSS() {\n        const cssObject = this.toCSSObject();\n        const cssArray = [];\n        const keys = getKeys(cssObject);\n\n        sortOrders(keys, this.orderMap.get([]));\n        keys.forEach(name => {\n            cssArray.push(`${name}:${cssObject[name]};`);\n        });\n        return cssArray.join(\"\");\n    }\n    /**\n      * Remove All Properties\n      * @return {Frame} An instance itself\n      */\n    public clear() {\n        this.properties = {};\n        this.orderMap.clear();\n        return this;\n    }\n    private _set(args: NameType[], value: any) {\n        let properties = this.properties;\n        const length = args.length;\n\n        for (let i = 0; i < length - 1; ++i) {\n            const name = args[i];\n\n            !(name in properties) && (properties[name] = {});\n            properties = properties[name];\n        }\n        if (!length) {\n            return;\n        }\n        const lastParam = args[length - 1];\n\n        this.orderMap.add(args);\n        if (length === 1 && lastParam === TIMING_FUNCTION) {\n            properties[lastParam] = getEasing(value);\n        } else {\n            properties[lastParam] = isString(value) && !isFixed(args)\n                ? toPropertyObject(value, lastParam)\n                : value;\n        }\n    }\n}\nexport default Frame;\n","\nimport PropertyObject from \"../PropertyObject\";\nimport { getType } from \"../utils\";\nimport { toPropertyObject } from \"./property\";\nimport { splitUnit, PROPERTY, FUNCTION, ARRAY, dot as dotNumber } from \"@daybrush/utils\";\nimport { EasingType } from \"../types\";\n\nfunction dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\nfunction dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.model;\n  const model2 = color2.model;\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n\nfunction dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.type;\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.separator || a2.separator,\n    prefix: a1.prefix || a2.prefix,\n    suffix: a1.suffix || a2.suffix,\n    model: a1.model || a2.model,\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n  const isFunction1 = type1 === FUNCTION;\n  const isFunction2 = type2 === FUNCTION;\n\n  if (isFunction1 || isFunction2) {\n    return () => {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === ARRAY) {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = dotNumber(v1.value, v2.value, b1, b2);\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\n\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import Animator, { isDirectionReverse } from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n    toFixed,\n    isFixed,\n    playCSS,\n    toId,\n    getRealId,\n    makeId,\n    isPausedCSS,\n    isRole,\n    getValueByNames,\n    isEndedCSS,\n    setPlayCSS,\n    getNames,\n    updateFrame,\n} from \"./utils\";\nimport { dotValue } from \"./utils/dot\";\nimport {\n    START_ANIMATION,\n    PREFIX, THRESHOLD,\n    TIMING_FUNCTION, ALTERNATE, ALTERNATE_REVERSE, INFINITE,\n    REVERSE, EASING, FILL_MODE, DIRECTION, ITERATION_COUNT,\n    EASING_NAME, DELAY, PLAY_SPEED, DURATION, PAUSE_ANIMATION,\n    DATA_SCENE_ID, SELECTOR, ROLES, NAME_SEPARATOR\n} from \"./consts\";\nimport {\n    isObject, isArray, isUndefined, decamelize,\n    ANIMATION, fromCSS, addClass, removeClass, hasClass,\n    KEYFRAMES, isFunction,\n    IObject, $, splitComma, toArray, isString, IArrayFormat,\n    dot as dotNumber,\n    find,\n    findIndex,\n    getKeys,\n    sortOrders,\n} from \"@daybrush/utils\";\nimport {\n    NameType, AnimateElement, AnimatorState,\n    SceneItemState, SceneItemOptions, EasingType, PlayCondition, DirectionType\n} from \"./types\";\nimport OrderMap from \"order-map\";\nimport styled, { InjectResult, StyledInjector } from \"css-styled\";\n\nfunction getNearTimeIndex(times: number[], time: number) {\n    const length = times.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (times[i] === time) {\n            return [i, i];\n        } else if (times[i] > time) {\n            return [i > 0 ? i - 1 : 0, i];\n        }\n    }\n    return [length - 1, length - 1];\n}\nfunction makeAnimationProperties(properties: object) {\n    const cssArray = [];\n\n    for (const name in properties) {\n        cssArray.push(`${ANIMATION}-${decamelize(name)}:${properties[name]};`);\n    }\n    return cssArray.join(\"\");\n}\nfunction addTime(times: number[], time: number) {\n    const length = times.length;\n    for (let i = 0; i < length; ++i) {\n        if (time < times[i]) {\n            times.splice(i, 0, time);\n            return;\n        }\n    }\n    times[length] = time;\n}\nfunction addEntry(entries: number[][], time: number, keytime: number) {\n    const prevEntry = entries[entries.length - 1];\n\n    (!prevEntry || prevEntry[0] !== time || prevEntry[1] !== keytime) &&\n        entries.push([toFixed(time), toFixed(keytime)]);\n}\nexport function getEntries(times: number[], states: AnimatorState[]) {\n    let entries = times.map(time => ([time, time]));\n    let nextEntries = [];\n\n    states.forEach(state => {\n        const iterationCount = state[ITERATION_COUNT] as number;\n        const delay = state[DELAY];\n        const playSpeed = state[PLAY_SPEED];\n        const direction = state[DIRECTION];\n        const intCount = Math.ceil(iterationCount);\n        const currentDuration = entries[entries.length - 1][0];\n        const length = entries.length;\n        const lastTime = currentDuration * iterationCount;\n\n        for (let i = 0; i < intCount; ++i) {\n            const isReverse =\n                direction === REVERSE ||\n                direction === ALTERNATE && i % 2 ||\n                direction === ALTERNATE_REVERSE && !(i % 2);\n\n            for (let j = 0; j < length; ++j) {\n                const entry = entries[isReverse ? length - j - 1 : j];\n                const time = entry[1];\n                const currentTime = currentDuration * i + (isReverse ? currentDuration - entry[0] : entry[0]);\n                const prevEntry = entries[isReverse ? length - j : j - 1];\n\n                if (currentTime > lastTime) {\n                    if (j !== 0) {\n                        const prevTime = currentDuration * i +\n                            (isReverse ? currentDuration - prevEntry[0] : prevEntry[0]);\n                        const divideTime = dotNumber(prevEntry[1], time, lastTime - prevTime, currentTime - lastTime);\n\n                        addEntry(nextEntries, (delay + currentDuration * iterationCount) / playSpeed, divideTime);\n                    }\n                    break;\n                } else if (\n                    currentTime === lastTime\n                    && nextEntries.length\n                    && nextEntries[nextEntries.length - 1][0] === lastTime + delay\n                ) {\n                    break;\n                }\n                addEntry(nextEntries, (delay + currentTime) / playSpeed, time);\n            }\n        }\n        // delay time\n        delay && nextEntries.unshift([0, nextEntries[0][1]]);\n\n        entries = nextEntries;\n        nextEntries = [];\n    });\n\n    return entries;\n}\n/**\n* manage Frame Keyframes and play keyframes.\n* @extends Animator\n* @example\nconst item = new SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator<SceneItemOptions, SceneItemState> {\n    public times: number[] = [];\n    public items: IObject<Frame> = {};\n    public nameMap = new OrderMap(NAME_SEPARATOR);\n    public elements: AnimateElement[] = [];\n    public styled: StyledInjector;\n    public styledInjector: InjectResult;\n    public temp: Frame;\n    private needUpdate: boolean = true;\n    private target: any;\n    private targetFunc: (frame: Frame) => void;\n\n    /**\n      * @param - properties\n      * @param - options\n      * @example\n      const item = new SceneItem({\n          0: {\n              display: \"none\",\n          },\n          1: {\n              display: \"block\",\n              opacity: 0,\n          },\n          2: {\n              opacity: 1,\n          }\n      });\n       */\n    constructor(properties?: any, options?: Partial<SceneItemOptions>) {\n        super();\n        this.load(properties, options);\n    }\n    public getDuration() {\n        const times = this.times;\n        const length = times.length;\n\n        return (length === 0 ? 0 : times[length - 1]) || this.state[DURATION];\n    }\n    /**\n      * get size of list\n      * @return {Number} length of list\n      */\n    public size() {\n        return this.times.length;\n    }\n    public setDuration(duration: number) {\n        if (!duration) {\n            return this;\n        }\n        const originalDuration = this.getDuration();\n\n        if (originalDuration > 0) {\n            const ratio = duration / originalDuration;\n            const { times, items } = this;\n            const obj: IObject<Frame> = {};\n\n            this.times = times.map(time => {\n                const time2 = toFixed(time * ratio);\n\n                obj[time2] = items[time];\n\n                return time2;\n            });\n            this.items = obj;\n        } else {\n            this.newFrame(duration);\n        }\n        return this;\n    }\n    public setId(id?: number | string) {\n        const state = this.state;\n        const elements = this.elements;\n        const length = elements.length;\n\n        state.id = id || makeId(!!length);\n\n        if (length && !state[SELECTOR]) {\n            const sceneId = toId(this.getId());\n\n            state[SELECTOR] = `[${DATA_SCENE_ID}=\"${sceneId}\"]`;\n            elements.forEach(element => {\n                element.setAttribute(DATA_SCENE_ID, sceneId);\n            });\n        }\n        return this;\n    }\n\n    /**\n      * Set properties to the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} [properties] - property names or values\n      * @return {SceneItem} An instance itself\n      * @example\n  item.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\n  console.log(item.get(0, \"a\")); // \"b\"\n      */\n    public set(time: any, ...args: any[]) {\n        if (time instanceof SceneItem) {\n            return this.set(0, time);\n        } else if (isArray(time)) {\n            const length = time.length;\n\n            for (let i = 0; i < length; ++i) {\n                const t = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n                this.set(t, time[i]);\n            }\n        } else if (isObject(time)) {\n            for (const t in time) {\n                const value = time[t];\n\n                splitComma(t).forEach(eachTime => {\n                    const realTime = this.getUnitTime(eachTime);\n\n                    if (isNaN(realTime)) {\n                        getNames(value, [eachTime]).forEach(names => {\n                            const innerValue = getValueByNames(names.slice(1), value);\n                            const arr = isArray(innerValue) ?\n                                innerValue : [getValueByNames(names, this.target), innerValue];\n                            const length = arr.length;\n\n                            for (let i = 0; i < length; ++i) {\n                                this.newFrame(`${i / (length - 1) * 100}%`).set(...names, arr[i]);\n                            }\n                        });\n                    } else {\n                        this.set(realTime, value);\n                    }\n                });\n            }\n        } else if (!isUndefined(time)) {\n            const value = args[0];\n\n            splitComma(time + \"\").forEach(eachTime => {\n                const realTime = this.getUnitTime(eachTime);\n\n                if (value instanceof SceneItem) {\n                    const delay = value.getDelay();\n                    const frames = value.toObject(!this.hasFrame(realTime + delay));\n                    const duration = value.getDuration();\n                    const direction = value.getDirection();\n                    const isReverse = direction.indexOf(\"reverse\") > -1;\n\n                    for (const frameTime in frames) {\n                        const nextTime = isReverse ? duration - parseFloat(frameTime) : parseFloat(frameTime);\n                        this.set(realTime + nextTime, frames[frameTime]);\n                    }\n                } else if (args.length === 1 && isArray(value)) {\n                    value.forEach((item: any) => {\n                        this.set(realTime, item);\n                    });\n                } else {\n                    const frame = this.newFrame(realTime);\n\n                    frame.set(...args);\n                }\n            });\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * Get properties of the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} args property's name or properties\n      * @return {Number|String|PropertyObejct} property value\n      * @example\n  item.get(0, \"a\"); // item.getFrame(0).get(\"a\");\n  item.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n      */\n    public get(time: string | number, ...args: NameType[]) {\n        const frame = this.getFrame(time);\n\n        return frame && frame.get(...args);\n    }\n    /**\n      * get properties orders\n      * @param - property names\n      * @example\n      item.getOrders([\"display\"]) // => []\n      item.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      */\n    public getOrders(names: NameType[]): NameType[] | undefined {\n        this.needUpdate && this.update();\n\n        return this.nameMap.get(names);\n    }\n    /**\n      * set properties orders\n      * @param - property names\n      * @param - orders\n      * @example\n      item.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      item.setOrders([\"transform\"], [\"scale\", \"tralsate\"])\n      */\n    public setOrders(names: NameType[], orders: NameType[]): NameType[] {\n        this.needUpdate && this.update();\n\n        const result = this.nameMap.set(names, orders);\n\n        this.updateFrameOrders();\n\n        return result;\n    }\n    public setOrderObject(obj: IObject<NameType[]>) {\n        this.nameMap.setObject(obj);\n\n        this.updateFrameOrders();\n    }\n    public remove(time: string | number, ...args: any[]): this;\n    /**\n      * remove properties to the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} [properties] - property names or values\n      * @return {SceneItem} An instance itself\n      * @example\n  item.remove(0, \"a\");\n      */\n    public remove(time: string | number, ...args: NameType[]) {\n        if (args.length) {\n            const frame = this.getFrame(time);\n\n            frame && frame.remove(...args);\n        } else {\n            this.removeFrame(time);\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * Append the item or object at the last time.\n      * @param - the scene item or item object\n      * @return An instance itself\n      * @example\n  item.append(new SceneItem({\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  }));\n  item.append({\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  });\n  item.set(item.getDuration(), {\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  });\n      */\n    public append(item: SceneItem | IObject<any>) {\n        if (item instanceof SceneItem) {\n            this.set(this.getDuration(), item);\n        } else {\n            this.append(new SceneItem(item));\n        }\n        return this;\n    }\n    /**\n      * Push the front frames for the time and prepend the scene item or item object.\n      * @param - the scene item or item object\n      * @return An instance itself\n      */\n    public prepend(item: SceneItem | IObject<any>) {\n        if (item instanceof SceneItem) {\n            const unshiftTime = item.getDuration() + item.getDelay();\n            const firstFrame = this.getFrame(0);\n            // remove first frame\n            this.removeFrame(0);\n            this.unshift(unshiftTime);\n            this.set(0, item);\n            this.set(unshiftTime + THRESHOLD, firstFrame);\n        } else {\n            this.prepend(new SceneItem(item));\n        }\n        return this;\n    }\n    /**\n     * Push out the amount of time.\n     * @param - time to push\n     * @example\n   item.get(0); // frame 0\n   item.unshift(3);\n   item.get(3) // frame 0\n     */\n    public unshift(time: number) {\n        const { times, items } = this;\n        const obj: IObject<Frame> = {};\n\n        this.times = times.map(t => {\n            const time2 = toFixed(time + t);\n\n            obj[time2] = items[t];\n            return time2;\n        });\n        this.items = obj;\n        return this;\n    }\n    /**\n     * Get the frames in the item in object form.\n     * @return {}\n     * @example\n item.toObject();\n // {0: {display: \"none\"}, 1: {display: \"block\"}}\n     */\n    public toObject(isStartZero = true): IObject<Frame> {\n        const obj: IObject<Frame> = {};\n        const delay = this.getDelay();\n\n        this.forEach((frame: Frame, time: number) => {\n            obj[(!time && !isStartZero ? THRESHOLD : 0) + delay + time] = frame.clone();\n        });\n        return obj;\n    }\n    /**\n     * Specifies an element to synchronize items' keyframes.\n     * @param {string} selectors - Selectors to find elements in items.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setSelector(\"#id.class\");\n     */\n    public setSelector(target: string | boolean | ((id: number | string) => string)) {\n        if (isFunction(target)) {\n            this.setElement(target(this.getId()));\n        } else {\n            this.setElement(target);\n        }\n        return this;\n    }\n    /**\n     * Get the elements connected to SceneItem.\n     */\n    public getElements(): AnimateElement[] {\n        return this.elements;\n    }\n    /**\n     * Specifies an element to synchronize item's keyframes.\n     * @param - elements to synchronize item's keyframes.\n     * @param - Make sure that you have peusdo.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n     */\n    public setElements(target: boolean | string | AnimateElement | IArrayFormat<AnimateElement>): this {\n        return this.setElement(target);\n    }\n    /**\n     * Specifies an element to synchronize item's keyframes.\n     * @param - elements to synchronize item's keyframes.\n     * @param - Make sure that you have peusdo.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n     */\n    public setElement(target: boolean | string | AnimateElement | IArrayFormat<AnimateElement>) {\n        const state = this.state;\n        let elements: AnimateElement[] = [];\n\n        if (!target) {\n            return this;\n        } else if (target === true || isString(target)) {\n            const selector = target === true ? `${state.id}` : target;\n            const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(selector);\n\n            elements = toArray($(matches ? matches[1] : selector, true));\n            state[SELECTOR] = selector;\n        } else {\n            elements = (target instanceof Element) ? [target] : toArray(target);\n        }\n        if (!elements.length) {\n            return this;\n        }\n        this.elements = elements;\n        this.setId(this.getId());\n        this.target = elements[0].style;\n        this.targetFunc = (frame: Frame) => {\n            const attributes = frame.get(\"attribute\");\n\n            if (attributes) {\n                for (const name in attributes) {\n                    elements.forEach(el => {\n                        el.setAttribute(name, attributes[name]);\n                    });\n                }\n            }\n            if (frame.has(\"html\")) {\n                const html = frame.get(\"html\");\n\n                elements.forEach(el => {\n                    el.innerHTML = html;\n                });\n            }\n            const cssText = frame.toCSS();\n\n            if (state.cssText !== cssText) {\n                state.cssText = cssText;\n\n                elements.forEach(el => {\n                    el.style.cssText += cssText;\n                });\n                return frame;\n            }\n        };\n        return this;\n    }\n    public setTarget(target: any): this {\n        this.target = target;\n        this.targetFunc = (frame: Frame) => {\n            const obj = frame.get();\n\n            for (const name in obj) {\n                target[name] = obj[name];\n            }\n        };\n        return this;\n    }\n    /**\n      * add css styles of items's element to the frame at that time.\n      * @param {Array} properties - elements to synchronize item's keyframes.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setElement(document.querySelector(\"#id.class\"));\n  item.setCSS(0, [\"opacity\"]);\n  item.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n      */\n    public setCSS(time: number, properties: string[]) {\n        this.set(time, fromCSS(this.elements, properties));\n        return this;\n    }\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean, parentEasing?: EasingType) {\n        super.setTime(time, isTick, isParent);\n\n        const iterationTime = this.getIterationTime();\n        const easing = this.getEasing() || parentEasing;\n        const frame = this.getNowFrame(iterationTime, easing);\n        const currentTime = this.getTime();\n\n        this.temp = frame;\n        /**\n         * This event is fired when timeupdate and animate.\n         * @event SceneItem#animate\n         * @param {Number} param.currentTime The total time that the animator is running.\n         * @param {Number} param.time The iteration time during duration that the animator is running.\n         * @param {Frame} param.frame frame of that time.\n         */\n        this.trigger(\"animate\", {\n            frame,\n            currentTime,\n            time: iterationTime,\n        });\n        this.targetFunc && this.targetFunc(frame);\n        return this;\n    }\n    /**\n      * update property names used in frames.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.update();\n      */\n    public update() {\n        const prevNameMap = this.nameMap;\n        const names = {};\n        this.forEach(frame => {\n            updateFrame(names, frame.properties);\n        });\n\n        const nameMap = new OrderMap(NAME_SEPARATOR);\n\n        function pushKeys(map: IObject<any>, stack: NameType[]) {\n            const keys = getKeys(map);\n\n            sortOrders(keys, prevNameMap.get(stack));\n\n            nameMap.set(stack, keys);\n            keys.forEach(key => {\n                const nextMap = map[key];\n                if (isObject(nextMap)) {\n                    pushKeys(nextMap, [...stack, key]);\n                }\n            });\n        }\n        pushKeys(names, []);\n\n        this.nameMap = nameMap;\n\n        this.forEach(frame => {\n            frame.setOrderObject(nameMap.orderMap);\n        });\n        this.needUpdate = false;\n        return this;\n    }\n    /**\n      * Create and add a frame to the sceneItem at that time\n      * @param {Number} time - frame's time\n      * @return {Frame} Created frame.\n      * @example\n  item.newFrame(time);\n      */\n    public newFrame(time: string | number) {\n        let frame = this.getFrame(time);\n\n        if (frame) {\n            return frame;\n        }\n        frame = new Frame();\n\n        this.setFrame(time, frame);\n        return frame;\n    }\n    /**\n      * Add a frame to the sceneItem at that time\n      * @param {Number} time - frame's time\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setFrame(time, frame);\n      */\n    public setFrame(time: string | number, frame: Frame) {\n        const realTime = this.getUnitTime(time);\n\n        this.items[realTime] = frame;\n        addTime(this.times, realTime);\n        this.needUpdate = true;\n        return this;\n    }\n    public getFrame(time: number | string, ...names: any[]): Frame;\n    /**\n      * get sceneItem's frame at that time\n      * @param {Number} time - frame's time\n      * @return {Frame} sceneItem's frame at that time\n      * @example\n  const frame = item.getFrame(time);\n      */\n    public getFrame(time: number | string) {\n        return this.items[this.getUnitTime(time)];\n    }\n    public removeFrame(time: number | string, ...names: any[]): this;\n    /**\n      * remove sceneItem's frame at that time\n      * @param - frame's time\n      * @return {SceneItem} An instance itself\n      * @example\n  item.removeFrame(time);\n      */\n    public removeFrame(time: number | string) {\n        const realTime = this.getUnitTime(time);\n        const items = this.items;\n        const index = this.times.indexOf(realTime);\n\n        delete items[realTime];\n\n        // remove time\n        if (index > -1) {\n            this.times.splice(index, 1);\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * check if the item has a frame at that time\n      * @param {Number} time - frame's time\n      * @return {Boolean} true: the item has a frame // false: not\n      * @example\n  if (item.hasFrame(10)) {\n      // has\n  } else {\n      // not\n  }\n      */\n    public hasFrame(time: number | string) {\n        return this.getUnitTime(time) in this.items;\n    }\n    /**\n      * Check if keyframes has propery's name\n      * @param - property's time\n      * @return {boolean} true: if has property, false: not\n      * @example\n    item.hasName([\"transform\", \"translate\"]); // true or not\n      */\n    public hasName(args: string[]) {\n        this.needUpdate && this.update();\n        return !!this.nameMap.get(args);\n    }\n    /**\n      * merge frame of the previous time at the next time.\n    * @param - The time of the frame to merge\n    * @param - The target frame\n      * @return {SceneItem} An instance itself\n      * @example\n  // getFrame(1) contains getFrame(0)\n  item.merge(0, 1);\n      */\n    public mergeFrame(time: number | string, frame: Frame) {\n        if (frame) {\n            const toFrame = this.newFrame(time);\n\n            toFrame.merge(frame);\n        }\n        return this;\n    }\n    /**\n      * Get frame of the current time\n      * @param {Number} time - the current time\n      * @param {function} easing - the speed curve of an animation\n      * @return {Frame} frame of the current time\n      * @example\n  let item = new SceneItem({\n      0: {\n          display: \"none\",\n      },\n      1: {\n          display: \"block\",\n          opacity: 0,\n      },\n      2: {\n          opacity: 1,\n      }\n  });\n  // opacity: 0.7; display:\"block\";\n  const frame = item.getNowFrame(1.7);\n      */\n    public getNowFrame(time: number, easing?: EasingType, isAccurate?: boolean) {\n        this.needUpdate && this.update();\n        const frame = new Frame();\n        const [left, right] = getNearTimeIndex(this.times, time);\n        let realEasing = this.getEasing() || easing;\n        let nameMap = this.nameMap;\n\n        if (this.hasName([TIMING_FUNCTION])) {\n            const nowEasing = this.getNowValue(time, [TIMING_FUNCTION], left, right, false, 0, true);\n\n            isFunction(nowEasing) && (realEasing = nowEasing);\n        }\n        if (isAccurate) {\n            const prevFrame = this.getFrame(time);\n            const prevOrderMap = prevFrame.orderMap.filter([], orders => {\n                return prevFrame.has(...orders);\n            });\n\n            for (const name in ROLES) {\n                const orders = nameMap.get([name]);\n                if (prevOrderMap.get([name]) && orders) {\n                    prevOrderMap.set([name], orders);\n                }\n            }\n            nameMap = prevOrderMap;\n        }\n        const names = nameMap.gets([]);\n\n        frame.setOrderObject(nameMap.orderMap);\n        names.forEach(properties => {\n            const value = this.getNowValue(time, properties, left, right, isAccurate, realEasing, isFixed(properties));\n\n            if (isUndefined(value)) {\n                return;\n            }\n            frame.set(properties, value);\n        });\n        return frame;\n    }\n    public load(properties: any = {}, options = properties.options) {\n        options && this.setOptions(options);\n\n        if (isArray(properties)) {\n            this.set(properties);\n        } else if (properties.keyframes) {\n            this.set(properties.keyframes);\n        } else {\n            for (const time in properties) {\n                if (time !== \"options\") {\n                    this.set({\n                        [time]: properties[time],\n                    });\n                }\n            }\n        }\n        if (options && options[DURATION]) {\n            this.setDuration(options[DURATION]);\n        }\n        return this;\n    }\n    /**\n       * clone SceneItem.\n       * @return {SceneItem} An instance of clone\n       * @example\n       * item.clone();\n       */\n    public clone() {\n        const item = new SceneItem();\n\n        item.setOptions(this.state);\n        item.setOrderObject(this.nameMap.orderMap);\n\n        this.forEach((frame: Frame, time: number) => {\n            item.setFrame(time, frame.clone());\n        });\n        return item;\n    }\n    /**\n       * executes a provided function once for each scene item.\n       * @param - Function to execute for each element, taking three arguments\n       * @return {Keyframes} An instance itself\n       */\n    public forEach(callback: (item: Frame, time: number, items: IObject<Frame>) => void) {\n        const times = this.times;\n        const items = this.items;\n\n        times.forEach(time => {\n            callback(items[time], time, items);\n        });\n        return this;\n    }\n    public setOptions(options: Partial<SceneItemOptions> = {}) {\n        super.setOptions(options);\n        const { id, selector, elements, element, target } = options;\n\n        id && this.setId(id);\n        if (target) {\n            this.setTarget(target);\n        } else if (selector) {\n            this.setSelector(selector);\n        } else if (elements || element) {\n            this.setElement(elements || element);\n        }\n        return this;\n    }\n    public toCSS(\n        playCondition: PlayCondition = { className: START_ANIMATION },\n        parentDuration = this.getDuration(), states: AnimatorState[] = []) {\n        const itemState = this.state;\n        const selector = itemState[SELECTOR];\n\n        if (!selector) {\n            return \"\";\n        }\n        const originalDuration = this.getDuration();\n        itemState[DURATION] = originalDuration;\n        states.push(itemState);\n\n        const reversedStates = toArray(states).reverse();\n        const id = toId(getRealId(this));\n        const superParent = states[0];\n        const infiniteIndex = findIndex(reversedStates, state => {\n            return state[ITERATION_COUNT] === INFINITE || !isFinite(state[DURATION]);\n        }, states.length - 1);\n        const finiteStates = reversedStates.slice(0, infiniteIndex);\n        const duration = parentDuration || finiteStates.reduce((prev, cur) => {\n            return (cur[DELAY] + prev * (cur[ITERATION_COUNT] as number)) / cur[PLAY_SPEED];\n        }, originalDuration);\n        const delay = reversedStates.slice(infiniteIndex).reduce((prev, cur) => {\n            return (prev + cur[DELAY]) / cur[PLAY_SPEED];\n        }, 0);\n        const easingName = find(reversedStates, state => (state[EASING] && state[EASING_NAME]), itemState)[EASING_NAME];\n        const iterationCount = reversedStates[infiniteIndex][ITERATION_COUNT];\n        const fillMode = superParent[FILL_MODE];\n        const direction = reversedStates[infiniteIndex][DIRECTION];\n        const cssText = makeAnimationProperties({\n            fillMode,\n            direction,\n            iterationCount,\n            delay: `${delay}s`,\n            name: `${PREFIX}KEYFRAMES_${id}`,\n            duration: `${duration / superParent[PLAY_SPEED]}s`,\n            timingFunction: easingName,\n        });\n        const selectors = splitComma(selector).map(sel => {\n            const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(sel);\n\n            if (matches) {\n                return [matches[1], matches[2]];\n            } else {\n                return [sel, \"\"];\n            }\n        });\n        const className = playCondition.className;\n        const selectorCallback = playCondition.selector;\n        const preselector = isFunction(selectorCallback) ? selectorCallback(this, selector) : selectorCallback;\n\n        return `\n    ${preselector || selectors.map(([sel, peusdo]) => `${sel}.${className}${peusdo}`)} {${cssText}}\n    ${selectors.map(([sel, peusdo]) => `${sel}.${PAUSE_ANIMATION}${peusdo}`)} {${ANIMATION}-play-state: paused;}\n    @${KEYFRAMES} ${PREFIX}KEYFRAMES_${id}{${this._toKeyframes(duration, finiteStates, direction)}}`;\n    }\n    /**\n     * Export the CSS of the items to the style.\n     * @param - Add a selector or className to play.\n     * @return {SceneItem} An instance itself\n     */\n    public exportCSS(\n        playCondition?: PlayCondition,\n        duration?: number, options?: AnimatorState[]) {\n        if (!this.elements.length) {\n            return \"\";\n        }\n        const css = this.toCSS(playCondition, duration, options);\n        const isParent = options && !isUndefined(options[ITERATION_COUNT]);\n\n        if (!isParent) {\n            if (this.styledInjector) {\n                this.styledInjector.destroy();\n                this.styledInjector = null;\n            }\n            this.styled = styled(css);\n            this.styledInjector = this.styled.inject(this.getAnimationElement(), { original: true });\n        }\n        return this;\n    }\n    public pause() {\n        super.pause();\n        isPausedCSS(this) && this.pauseCSS();\n        return this;\n    }\n    public pauseCSS() {\n        this.elements.forEach(element => {\n            addClass(element, PAUSE_ANIMATION);\n        });\n        return this;\n    }\n    public endCSS() {\n        this.elements.forEach(element => {\n            removeClass(element, PAUSE_ANIMATION);\n            removeClass(element, START_ANIMATION);\n        });\n        setPlayCSS(this, false);\n        return this;\n    }\n    public end() {\n        isEndedCSS(this) && this.endCSS();\n        super.end();\n        return this;\n    }\n    /**\n      * Play using the css animation and keyframes.\n      * @param - Check if you want to export css.\n      * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n      * @param - The shorthand properties for six of the animation properties.\n      * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n      * @example\n  item.playCSS();\n  item.playCSS(false, \"startAnimation\", {\n      direction: \"reverse\",\n      fillMode: \"forwards\",\n  });\n      */\n    public playCSS(isExportCSS = true, playClassName?: string, properties: object = {}) {\n        playCSS(this, isExportCSS, playClassName, properties);\n        return this;\n    }\n    public getAnimationElement(): AnimateElement {\n        return this.elements[0];\n    }\n    public addPlayClass(isPaused: boolean, playClassName?: string, properties: object = {}) {\n        const elements = this.elements;\n        const length = elements.length;\n        const cssText = makeAnimationProperties(properties);\n\n        if (!length) {\n            return;\n        }\n        if (isPaused) {\n            elements.forEach(element => {\n                removeClass(element, PAUSE_ANIMATION);\n            });\n        } else {\n            elements.forEach(element => {\n                element.style.cssText += cssText;\n\n                if (hasClass(element, START_ANIMATION)) {\n                    removeClass(element, START_ANIMATION);\n                }\n            });\n            elements.forEach(element => {\n                element.clientWidth;\n            });\n            elements.forEach(element => {\n                addClass(element, START_ANIMATION);\n            });\n        }\n        return elements[0];\n    }\n    /**\n      * Clear All Frames\n      * @return {SceneItem} An instance itself\n      */\n    public clear() {\n        this.times = [];\n        this.items = {};\n        this.nameMap = new OrderMap(NAME_SEPARATOR);\n\n        if (this.styledInjector) {\n            this.styledInjector.destroy();\n        }\n        this.styled = null;\n        this.styledInjector = null;\n        this.temp = null;\n        this.needUpdate = true;\n        return this;\n    }\n    public getNowValue(\n        time: number,\n        properties: NameType[],\n        left?: number,\n        right?: number,\n        isAccurate?: boolean,\n        easing?: EasingType,\n        usePrevValue?: boolean,\n    ) {\n        const times = this.times;\n        const length = times.length;\n\n        let prevTime: number;\n        let nextTime: number;\n        let prevFrame: Frame;\n        let nextFrame: Frame;\n        const isUndefinedLeft = isUndefined(left);\n        const isUndefinedRight = isUndefined(right);\n        if (isUndefinedLeft || isUndefinedRight) {\n            const indicies = getNearTimeIndex(times, time);\n            isUndefinedLeft && (left = indicies[0]);\n            isUndefinedRight && (right = indicies[1]);\n        }\n\n        for (let i = left; i >= 0; --i) {\n            const frame = this.getFrame(times[i]);\n\n            if (frame.has(...properties)) {\n                prevTime = times[i];\n                prevFrame = frame;\n                break;\n            }\n        }\n        const prevValue = prevFrame && prevFrame.raw(...properties);\n\n        if (isAccurate && !isRole([properties[0]])) {\n            return prevTime === time ? prevValue : undefined;\n        }\n        if (usePrevValue) {\n            return prevValue;\n        }\n        for (let i = right; i < length; ++i) {\n            const frame = this.getFrame(times[i]);\n\n            if (frame.has(...properties)) {\n                nextTime = times[i];\n                nextFrame = frame;\n                break;\n            }\n        }\n        const nextValue = nextFrame && nextFrame.raw(...properties);\n\n        if (!prevFrame || isUndefined(prevValue)) {\n            return nextValue;\n        }\n        if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n            return prevValue;\n        }\n        return dotValue(time, Math.max(prevTime, 0), nextTime, prevValue, nextValue, easing);\n    }\n    private _toKeyframes(duration: number, states: AnimatorState[], direction: DirectionType) {\n        const frames: IObject<string> = {};\n        const times = this.times.slice();\n\n        if (!times.length) {\n            return \"\";\n        }\n        const originalDuration = this.getDuration();\n        (!this.getFrame(0)) && times.unshift(0);\n        (!this.getFrame(originalDuration)) && times.push(originalDuration);\n        const entries = getEntries(times, states);\n        const lastEntry = entries[entries.length - 1];\n\n        // end delay time\n        lastEntry[0] < duration && addEntry(entries, duration, lastEntry[1]);\n        let prevTime = -1;\n\n        return entries.map(([time, keytime]) => {\n            if (!frames[keytime]) {\n                frames[keytime] =\n                    (!this.hasFrame(keytime) || keytime === 0 || keytime === originalDuration ?\n                        this.getNowFrame(keytime) : this.getNowFrame(keytime, 0, true)).toCSS();\n            }\n\n            let frameTime = time / duration * 100;\n\n            if (frameTime - prevTime < THRESHOLD) {\n                frameTime += THRESHOLD;\n            }\n            prevTime = frameTime;\n            return `${Math.min(frameTime, 100)}%{\n                ${time === 0 && !isDirectionReverse(0, 1, direction) ? \"\" : frames[keytime]}\n            }`;\n        }).join(\"\");\n    }\n    private updateFrameOrders() {\n        const nameMap = this.nameMap.orderMap;\n\n        this.forEach(frame => {\n            frame.setOrderObject(nameMap);\n        });\n    }\n}\n\nexport default SceneItem;\n","import Animator from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { SELECTOR, DURATION, DELAY, RUNNING, NAME_SEPARATOR } from \"./consts\";\nimport { playCSS, getRealId, isPausedCSS, isEndedCSS, setPlayCSS } from \"./utils\";\nimport { isFunction, IS_WINDOW, IObject, $, IArrayFormat } from \"@daybrush/utils\";\nimport {\n    AnimateElement, SceneState, SceneOptions, EasingType,\n    AnimatorState, SceneItemOptions, PlayCondition, NameType\n} from \"./types\";\nimport Frame from \"./Frame\";\nimport OrderMap from \"order-map\";\nimport styled, { InjectResult, StyledInjector } from \"css-styled\";\n/**\n * manage sceneItems and play Scene.\n * @sort 1\n */\nclass Scene extends Animator<SceneOptions, SceneState> {\n    /**\n    * version info\n    * @type {string}\n    * @example\n    * Scene.VERSION // #__VERSION__#\n    */\n    public static VERSION: string = \"#__VERSION__#\";\n    public items: IObject<Scene | SceneItem> = {};\n    public orderMap = new OrderMap(NAME_SEPARATOR);\n    public styled: StyledInjector;\n    public styledInjector: InjectResult;\n    public temp: IObject<Frame>;\n    /**\n    * @param - properties\n    * @param - options\n    * @example\n    const scene = new Scene({\n      item1: {\n        0: {\n          display: \"none\",\n        },\n        1: {\n          display: \"block\",\n          opacity: 0,\n        },\n        2: {\n          opacity: 1,\n        },\n      },\n      item2: {\n        2: {\n          opacity: 1,\n        },\n      }\n    });\n      */\n    constructor(properties?: { options?: Partial<SceneOptions> } & IObject<any>, options?: Partial<SceneOptions>) {\n        super();\n        this.load(properties, options);\n    }\n    public getDuration() {\n        let time = 0;\n\n        this.forEach(item => {\n            time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n        });\n        return time || this.state[DURATION];\n    }\n    public setDuration(duration: number) {\n        const items = this.items;\n        const sceneDuration = this.getDuration();\n\n        if (duration === 0 || !isFinite(sceneDuration)) {\n            return this;\n        }\n        if (sceneDuration === 0) {\n            this.forEach(item => {\n                item.setDuration(duration);\n            });\n        } else {\n            const ratio = duration / sceneDuration;\n\n            this.forEach(item => {\n                item.setDelay(item.getDelay() * ratio);\n                item.setDuration(item.getDuration() * ratio);\n            });\n        }\n        super.setDuration(duration);\n        return this;\n    }\n    public getItem<T extends (Scene | SceneItem) = Scene | SceneItem>(name: number | string): T;\n    /**\n    * get item in scene by name\n    * @param - The item's name\n    * @return {Scene | SceneItem} item\n    * @example\n    const item = scene.getItem(\"item1\")\n    */\n    public getItem(name: number | string) {\n        return this.items[name];\n    }\n    /**\n    * create item in scene\n    * @param {} name - name of item to create\n    * @param {} options - The option object of SceneItem\n    * @return {} Newly created item\n    * @example\n    const item = scene.newItem(\"item1\")\n    */\n    public newItem(name: number | string, options: Partial<SceneItemOptions> = {}): Scene | SceneItem {\n        if (this.items[name]) {\n            return this.items[name];\n        }\n        const item = new SceneItem();\n\n        this.setItem(name, item);\n        item.setOptions(options);\n\n        return item;\n    }\n    /**\n    * remove item in scene\n    * @param - name of item to remove\n    * @return  An instance itself\n    * @example\n    const item = scene.newItem(\"item1\")\n\n    scene.removeItem(\"item1\");\n    */\n    public removeItem(name: number | string): this {\n        delete this.items[name];\n\n        this.orderMap.remove([name]);\n        return this;\n    }\n    /**\n    * add a sceneItem to the scene\n    * @param - name of item to create\n    * @param - sceneItem\n    * @example\n    const item = scene.newItem(\"item1\")\n    */\n    public setItem(name: number | string, item: Scene | SceneItem) {\n        item.setId(name);\n        this.items[name] = item;\n\n        this.orderMap.add([name]);\n        return this;\n    }\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean, parentEasing?: EasingType) {\n        super.setTime(time, isTick, isParent);\n\n        const iterationTime = this.getIterationTime();\n        const easing = this.getEasing() || parentEasing;\n        const frames: IObject<any> = {};\n\n        this.forEach(item => {\n            item.setTime(iterationTime * item.getPlaySpeed() - item.getDelay(), isTick, true, easing);\n\n            frames[item.getId()] = item.temp;\n        });\n        this.temp = frames;\n\n        /**\n         * This event is fired when timeupdate and animate.\n         * @event Scene#animate\n         * @param {object} param The object of data to be sent to an event.\n         * @param {number} param.currentTime The total time that the animator is running.\n         * @param {number} param.time The iteration time during duration that the animator is running.\n         * @param {object} param.frames frames of that time.\n         * @example\nconst scene = new Scene({\n    a: {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        }\n    },\n    b: {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        }\n    }\n}).on(\"animate\", e => {\n    console.log(e.frames);\n    // {a: Frame, b: Frame}\n    console.log(e.frames.a.get(\"opacity\"));\n});\n             */\n        this.trigger(\"animate\", {\n            frames,\n            currentTime: this.getTime(),\n            time: iterationTime,\n        });\n\n        return this;\n    }\n    /**\n     * executes a provided function once for each scene item.\n     * @param - Function to execute for each element, taking three arguments\n     * @return {Scene} An instance itself\n     */\n    public forEach(\n        func: (\n            item: Scene | SceneItem,\n            id: string | number,\n            index: number,\n            items: IObject<Scene | SceneItem>,\n        ) => void,\n    ) {\n        const items = this.items;\n        this.getOrders().forEach((id, index) => {\n            func(items[id], id, index, items);\n        });\n        return this;\n    }\n    public toCSS(\n        playCondition?: PlayCondition,\n        duration: number = this.getDuration(), parentStates: AnimatorState[] = []) {\n        const totalDuration = !duration || !isFinite(duration) ? 0 : duration;\n        const styles: string[] = [];\n        const state = this.state;\n\n        state[DURATION] = this.getDuration();\n\n        this.forEach(item => {\n            styles.push(item.toCSS(playCondition, totalDuration, parentStates.concat(state)));\n        });\n        return styles.join(\"\");\n    }\n    /**\n     * Export the CSS of the items to the style.\n     * @param - Add a selector or className to play.\n     * @return {Scene} An instance itself\n     */\n    public exportCSS(\n        playCondition?: PlayCondition, duration?: number, parentStates?: AnimatorState[]) {\n        const css = this.toCSS(playCondition, duration, parentStates);\n\n        if (!parentStates || !parentStates.length) {\n            if (this.styledInjector) {\n                this.styledInjector.destroy();\n                this.styledInjector = null;\n            }\n            this.styled = styled(css);\n            this.styledInjector = this.styled.inject(this.getAnimationElement(), { original: true });\n            // && exportCSS(getRealId(this), css);\n        }\n        return this;\n    }\n    public append(item: SceneItem | Scene) {\n        item.setDelay(item.getDelay() + this.getDuration());\n        this.setItem(getRealId(item), item);\n    }\n    public pauseCSS() {\n        return this.forEach(item => {\n            item.pauseCSS();\n        });\n    }\n    public pause() {\n        super.pause();\n\n        isPausedCSS(this) && this.pauseCSS();\n        this.forEach(item => {\n            item.pause();\n        });\n        return this;\n    }\n    public endCSS() {\n        this.forEach(item => {\n            item.endCSS();\n        });\n        setPlayCSS(this, false);\n    }\n    public end() {\n        isEndedCSS(this) && this.endCSS();\n        super.end();\n        return this;\n    }\n        /**\n      * get item orders\n      * @example\n      scene.getOrders() // => [\"item1\", \"item2\"]\n      */\n     public getOrders(): NameType[] {\n        return this.orderMap.get([]) || [];\n    }\n    /**\n      * set item orders\n      * @param - orders\n      * @example\n      frame.setOrders([\"item2\", \"item1\"]) // => [\"item2\", \"item1\"]\n      */\n    public setOrders(orders: NameType[]): NameType[] {\n        return this.orderMap.set([], orders);\n    }\n    public getAnimationElement() {\n        let animtionElement: AnimateElement;\n\n        this.forEach(item => {\n            const el = item.getAnimationElement();\n\n            !animtionElement && (animtionElement = el);\n        });\n        return animtionElement;\n    }\n    public addPlayClass(isPaused: boolean, playClassName?: string, properties: object = {}) {\n        let animtionElement: AnimateElement;\n\n        this.forEach(item => {\n            const el = item.addPlayClass(isPaused, playClassName, properties);\n\n            !animtionElement && (animtionElement = el);\n        });\n        return animtionElement;\n    }\n    /**\n    * Play using the css animation and keyframes.\n    * @param - Check if you want to export css.\n    * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n    * @param - The shorthand properties for six of the animation properties.\n    * @return {Scene} An instance itself\n    * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n    * @example\n    scene.playCSS();\n    scene.playCSS(false, {\n    direction: \"reverse\",\n    fillMode: \"forwards\",\n    });\n    */\n    public playCSS(isExportCSS = true, playClassName?: string, properties: Partial<AnimatorState> = {}) {\n        playCSS(this, isExportCSS, playClassName, properties);\n        return this;\n    }\n    public set(properties: any, ...args: any[]): this;\n    /**\n      * Set properties to the Scene.\n      * @param - properties\n      * @return An instance itself\n      * @example\nscene.set({\n    \".a\": {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        },\n    },\n});\n// 0\nconsole.log(scene.getItem(\".a\").get(0, \"opacity\"));\n// 1\nconsole.log(scene.getItem(\".a\").get(1, \"opacity\"));\n      */\n    public set(properties: any) {\n        this.load(properties);\n        return this;\n    }\n    /**\n      * Clear All Items\n      * @return {Scene} An instance itself\n      */\n    public clear() {\n        this.finish();\n        this.items = {};\n        this.orderMap = new OrderMap(NAME_SEPARATOR);\n\n        if (this.styledInjector) {\n            this.styledInjector.destroy();\n        }\n        this.styled = null;\n        this.styledInjector = null;\n    }\n    public load(properties: any = {}, options = properties.options) {\n        if (!properties) {\n            return this;\n        }\n        const selector = options && options[SELECTOR] || this.state[SELECTOR];\n        for (const name in properties) {\n            if (name === \"options\") {\n                continue;\n            }\n            const object = properties[name];\n            let item;\n\n            if (object instanceof Scene || object instanceof SceneItem) {\n                this.setItem(name, object);\n                item = object;\n            } else if (isFunction(object) && selector) {\n                const elements =\n                    IS_WINDOW\n                        ? $(`${isFunction(selector) ? selector(name) : name}`, true) as IArrayFormat<AnimateElement>\n                        : ([] as AnimateElement[]);\n                const length = elements.length;\n                const scene = new Scene();\n\n                for (let i = 0; i < length; ++i) {\n                    (scene.newItem(i) as SceneItem).setId().setElement(elements[i]).load(object(i, elements[i]));\n                }\n                this.setItem(name, scene);\n                continue;\n            } else {\n                item = this.newItem(name);\n                item.load(object);\n            }\n            selector && item.setSelector(selector);\n        }\n        this.setOptions(options);\n    }\n    public setOptions(options: Partial<SceneState> = {}): this {\n        super.setOptions(options);\n\n        const selector = options.selector;\n\n        if (selector) {\n            this.state[SELECTOR] = selector;\n        }\n        return this;\n    }\n    public setSelector(target?: string | boolean | ((id: number | string) => string)) {\n        const state = this.state;\n        const selector = target || state[SELECTOR];\n\n        state[SELECTOR] = selector;\n        const isItFunction = isFunction(target);\n        if (selector) {\n            this.forEach((item, name) => {\n                item.setSelector(isItFunction ? (target as (id: number | string) => string)(name) : selector);\n            });\n        }\n        return this;\n    }\n    public start(delay: number = this.state[DELAY]): boolean {\n        const result = super.start(delay);\n\n        if (result) {\n            this.forEach(item => {\n                item.start(0);\n            });\n        } else {\n            this.forEach(item => {\n                item.setPlayState(RUNNING);\n            });\n        }\n        return result;\n    }\n}\n\nexport default Scene;\n","import { IObject } from \"@daybrush/utils\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport { SceneOptions, SceneItemOptions } from \"./types\";\n\nexport function animate(properties?: IObject<any>, options?: Partial<SceneOptions>) {\n    return new Scene(properties, options).play();\n}\nexport function animateItem(properties?: IObject<any>, options?: Partial<SceneItemOptions>) {\n    return new SceneItem(properties, options).play();\n}\n","import Scene, * as others from \"./index\";\n\nfor (const name in others) {\n    (Scene as any)[name] = (others as any)[name];\n}\n\nexport default Scene;\n"],"names":["cubic","y1","y2","t","t2","bezier","x1","x2","func","x","dx","Math","abs","solveFromX","max","min","easingName","steps","count","position","time","level","floor","STEP_START","STEP_END","LINEAR","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","PREFIX","DATA_SCENE_ID","TIMING_FUNCTION","ROLES","transform","filter","attribute","html","ALIAS","easing","FIXED","_a","MAXIMUM","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","PAUSED","ENDED","TIMEUPDATE","PLAY","RUNNING","ITERATION","START_ANIMATION","PAUSE_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","INFINITE","PLAY_STATE","PLAY_CSS","PREV_TIME","TICK_TIME","CURRENT_TIME","SELECTOR","TRANSFORM_NAME","EASINGS","NAME_SEPARATOR","OPTIONS","EVENTS","events","name","callback","once","this","isObject","n","_on","isArray","forEach","_this","push","callback2","_i","args","off","callbacks","index","indexOf","splice","data","target","type","currentTarget","toArray","apply","value","options","setOptions","isString","split","separator","newOptions","length","prefix","suffix","model","PropertyObject","map","v","clone","join","toValue","arrayToColorObject","arr","RGBA","arrayToPropertyObject","toPropertyObject","values","splitComma","splitSpace","exec","text","splitBracket","afterModel","COLOR_MODELS","stringToRGBA","obj","stringToBracketObject","charAt","result","stringToColorObject","isPropertyObject","getType","OBJECT","ARRAY","PROPERTY","STRING","NUMBER","isPureObject","constructor","Object","getNames","names","stack","concat","pop","slice","toFixed","num","round","getValueByNames","properties","i","isInProperties","roles","isCheckTrue","role","isRole","isFixed","setPlayCSS","item","isActivate","state","isPausedCSS","isPaused","isEndedCSS","isEnded","makeId","selector","id","random","IS_WINDOW","$","getRealId","getId","setId","toId","match","playCSS","isExportCSS","playClassName","ANIMATION","getPlayState","className","addPlayClass","setTime","exportCSS","el","animationend","finish","animationstart","trigger","addEvent","animationiteration","duration","getDuration","isZeroDuration","isFinite","removeEvent","currentTime","iterationCount","setIteration","addAnimationEvent","setPlayState","getEasing","curveArray","parseFloat","isDirectionReverse","iteration","iteraiontCount","direction","setters","getters","_super","delay","fillMode","playSpeed","iterationTime","tickTime","prevTime","playState","__extends","setDuration","setEasing","getActiveDuration","Infinity","getTime","toTime","timerId","requestAnimationFrame","tick","start","cancelAnimationFrame","end","pause","isTick","isParent","activeDuration","getUnitTime","calculate","isDelay","getIterationTime","splitUnit","unit","passIterationCount","maxIterationCount","currentIterationTime","setIterationTime","isReverse","isFiniteDuration","now","to","Animator","getter","setter","parent","prototype","camelize","GetterSetter","EventTrigger","toInnerProperties","orders","arrObj","keys","getKeys","sortOrders","replace","merge","from","FUNCTION","getValue","getPropertyName","OrderMap","set","raw","orderMap","get","setObject","key","children","gets","params","remove","self","firstParam","Frame","_set","toObject","object","size","has","str","splitText","totalLength","matches","trim","styles","splitStyle","stylesLength","isUndefined","frame","setOrderObject","frameProperties","cssObject","FILTER","TRANSFORM","toCSSObject","cssArray","clear","lastParam","add","dotArray","a1","a2","b1","b2","v1","dot","dotObject","a1Type","color1","color2","value1","value2","model1","colorModel","parseInt","dotColor","type1","type2","isFunction1","isFunction2","v2","isNaN","dotNumber","getNearTimeIndex","times","makeAnimationProperties","decamelize","addEntry","entries","keytime","prevEntry","load","originalDuration","ratio_1","items_1","obj_1","time2","items","newFrame","elements","sceneId_1","element","setAttribute","SceneItem","eachTime","realTime","innerValue","value_1","getDelay","frames","hasFrame","getDirection","frameTime","nextTime","needUpdate","getFrame","update","nameMap","updateFrameOrders","removeFrame","append","unshiftTime","firstFrame","unshift","prepend","isStartZero","isFunction","setElement","Element","style","targetFunc","attributes","html_1","innerHTML","cssText","toCSS","fromCSS","parentEasing","getNowFrame","temp","prevNameMap","updateFrame","pushKeys","nextMap","setFrame","addTime","isAccurate","left","right","realEasing","hasName","nowEasing","getNowValue","prevFrame_1","prevOrderMap","keyframes","setTarget","setSelector","playCondition","parentDuration","states","itemState","reversedStates","reverse","superParent","infiniteIndex","findIndex","finiteStates","reduce","prev","cur","find","timingFunction","selectors","sel","selectorCallback","peusdo","KEYFRAMES","_toKeyframes","css","styledInjector","destroy","styled","inject","getAnimationElement","original","pauseCSS","addClass","removeClass","endCSS","hasClass","clientWidth","usePrevValue","prevFrame","nextFrame","isUndefinedLeft","isUndefinedRight","indicies","prevValue","undefined","nextValue","ratio","dotValue","nextEntries","intCount","ceil","currentDuration","lastTime","j","entry","divideTime","getEntries","lastEntry","getTotalDuration","getPlaySpeed","sceneDuration","setDelay","setItem","getOrders","parentStates","totalDuration","animtionElement","Scene","scene","newItem","isItFunction","isProperty","isFixedProperty","fixed","alias","play","others"],"mappings":"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"}