{"version":3,"file":"scene.cjs.js","sources":["../src/easing.ts","../src/consts.ts","../src/PropertyObject.ts","../src/utils/property.ts","../src/utils.ts","../src/Animator.ts","../src/Frame.ts","../src/utils/dot.ts","../src/SceneItem.ts","../src/Scene.ts","../src/presets.ts","../src/index.umd.ts"],"sourcesContent":["import { between } from \"@daybrush/utils\";\nimport { EasingFunction } from \"./types\";\n\nfunction cubic(y1: number, y2: number, t: number) {\n  const t2 = 1 - t;\n\n  // Bezier Curve Formula\n  return t * t * t + 3 * t * t * t2 * y2 + 3 * t * t2 * t2 * y1;\n}\nfunction solveFromX(x1: number, x2: number, x: number) {\n  // x  0 ~ 1\n  // t 0 ~ 1\n  let t = x;\n  let solveX = x;\n  let dx = 1;\n\n  while (Math.abs(dx) > 1 / 1000) {\n    // 예상 t초에 의한 _x값\n    solveX = cubic(x1, x2, t);\n    dx = solveX - x;\n    // 차이가 미세하면 그 값을 t로 지정\n    if (Math.abs(dx) < 1 / 1000) {\n      return t;\n    }\n    t -= dx / 2;\n  }\n  return t;\n}\n/**\n * @namespace easing\n */\n/**\n* Cubic Bezier curve.\n* @memberof easing\n* @func bezier\n* @param {number} [x1] - point1's x\n* @param {number} [y1] - point1's y\n* @param {number} [x2] - point2's x\n* @param {number} [y2] - point2's y\n* @return {function} the curve function\n* @example\nimport {bezier} from \"scenejs\";\nScene.bezier(0, 0, 1, 1) // LINEAR\nScene.bezier(0.25, 0.1, 0.25, 1) // EASE\n*/\nexport function bezier(x1: number, y1: number, x2: number, y2: number) {\n  /*\n\t\tx = f(t)\n\t\tcalculate inverse function by x\n\t\tt = f-1(x)\n\t*/\n  const func: EasingFunction = (x: number) => {\n    const t = solveFromX(x1, x2, between(x, 0, 1));\n\n    return cubic(y1, y2, t);\n  };\n\n  func.easingName = `cubic-bezier(${x1},${y1},${x2},${y2})`;\n  return func;\n}\n/**\n* Specifies a stepping function\n* @see {@link https://www.w3schools.com/cssref/css3_pr_animation-timing-function.asp|CSS3 Timing Function}\n* @memberof easing\n* @func steps\n* @param {number} count - point1's x\n* @param {\"start\" | \"end\"} postion - point1's y\n* @return {function} the curve function\n* @example\nimport {steps} from \"scenejs\";\nScene.steps(1, \"start\") // Scene.STEP_START\nScene.steps(1, \"end\") // Scene.STEP_END\n*/\nexport function steps(count: number, position: \"start\" | \"end\") {\n  const func: EasingFunction = (time: number) => {\n    const level = 1 / count;\n\n    if (time >= 1) {\n      return 1;\n    }\n    return (position === \"start\" ? level : 0) + Math.floor(time / level) * level;\n  };\n\n  func.easingName = `steps(${count}, ${position})`;\n\n  return func;\n}\n\n/**\n* Equivalent to steps(1, start)\n* @memberof easing\n* @name STEP_START\n* @static\n* @type {function}\n* @example\nimport {STEP_START} from \"scenejs\";\nScene.STEP_START // steps(1, start)\n*/\nexport const STEP_START = /*#__PURE__#*/steps(1, \"start\");\n/**\n* Equivalent to steps(1, end)\n* @memberof easing\n* @name STEP_END\n* @static\n* @type {function}\n* @example\nimport {STEP_END} from \"scenejs\";\nScene.STEP_END // steps(1, end)\n*/\nexport const STEP_END = /*#__PURE__#*/steps(1, \"end\");\n/**\n* Linear Speed (0, 0, 1, 1)\n* @memberof easing\n* @name LINEAR\n* @static\n* @type {function}\n* @example\nimport {LINEAR} from \"scenejs\";\nScene.LINEAR\n*/\nexport const LINEAR = /*#__PURE__#*/bezier(0, 0, 1, 1);\n/**\n* Ease Speed (0.25, 0.1, 0.25, 1)\n* @memberof easing\n* @name EASE\n* @static\n* @type {function}\n* @example\nimport {EASE} from \"scenejs\";\nScene.EASE\n*/\nexport const EASE = /*#__PURE__#*/bezier(0.25, 0.1, 0.25, 1);\n/**\n* Ease In Speed (0.42, 0, 1, 1)\n* @memberof easing\n* @name EASE_IN\n* @static\n* @type {function}\n* @example\nimport {EASE_IN} from \"scenejs\";\nScene.EASE_IN\n*/\nexport const EASE_IN = /*#__PURE__#*/bezier(0.42, 0, 1, 1);\n/**\n* Ease Out Speed (0, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_OUT} from \"scenejs\";\nScene.EASE_OUT\n*/\nexport const EASE_OUT = /*#__PURE__#*/bezier(0, 0, 0.58, 1);\n/**\n* Ease In Out Speed (0.42, 0, 0.58, 1)\n* @memberof easing\n* @name EASE_IN_OUT\n* @static\n* @type {function}\n* @example\nimport {EASE_IN_OUT} from \"scenejs\";\nScene.EASE_IN_OUT\n*/\nexport const EASE_IN_OUT = /*#__PURE__#*/bezier(0.42, 0, 0.58, 1);\n","import { IObject } from \"@daybrush/utils\";\nimport { RoleObject, OptionType, EventType, EasingFunction } from \"./types\";\nimport { EASE, EASE_IN, EASE_IN_OUT, LINEAR, EASE_OUT, STEP_START, STEP_END } from \"./easing\";\n\nexport const PREFIX = \"__SCENEJS_\";\nexport const DATA_SCENE_ID = \"data-scene-id\";\nexport const TIMING_FUNCTION = \"animation-timing-function\";\nexport const ROLES: RoleObject = { transform: {}, filter: {}, attribute: {}, html: true };\nexport const ALIAS: IObject<string[]> = { easing: [TIMING_FUNCTION] };\nexport const FIXED = { [TIMING_FUNCTION]: true, contents: true, html: true };\nexport const MAXIMUM = 1000000;\nexport const THRESHOLD = 0.000001;\n\nexport const DURATION = \"duration\";\nexport const FILL_MODE = \"fillMode\";\nexport const DIRECTION = \"direction\";\nexport const ITERATION_COUNT = \"iterationCount\";\nexport const DELAY = \"delay\";\nexport const EASING = \"easing\";\nexport const PLAY_SPEED = \"playSpeed\";\nexport const EASING_NAME = \"easingName\";\nexport const ITERATION_TIME = \"iterationTime\";\nexport const PAUSED = \"paused\";\nexport const ENDED = \"ended\";\nexport const TIMEUPDATE = \"timeupdate\";\nexport const ANIMATE = \"animate\";\nexport const PLAY = \"play\";\nexport const RUNNING = \"running\";\nexport const ITERATION = \"iteration\";\nexport const START_ANIMATION = \"startAnimation\";\nexport const PAUSE_ANIMATION = \"pauseAnimation\";\nexport const ALTERNATE = \"alternate\";\nexport const REVERSE = \"reverse\";\nexport const ALTERNATE_REVERSE = \"alternate-reverse\";\nexport const NORMAL = \"normal\";\nexport const INFINITE = \"infinite\";\nexport const PLAY_STATE = \"playState\";\nexport const PLAY_CSS = \"playCSS\";\nexport const PREV_TIME = \"prevTime\";\nexport const TICK_TIME = \"tickTime\";\nexport const CURRENT_TIME = \"currentTime\";\nexport const SELECTOR = \"selector\";\nexport const TRANSFORM_NAME = \"transform\";\nexport const EASINGS = {\n    \"linear\": LINEAR,\n    \"ease\": EASE,\n    \"ease-in\": EASE_IN,\n    \"ease-out\": EASE_OUT,\n    \"ease-in-out\": EASE_IN_OUT,\n    \"step-start\": STEP_START,\n    \"step-end\": STEP_END,\n};\nexport const NAME_SEPARATOR = \"_///_\";\n/**\n* option name list\n* @name Scene.OPTIONS\n* @memberof Scene\n* @static\n* @type {$ts:OptionType}\n* @example\n* Scene.OPTIONS // [\"duration\", \"fillMode\", \"direction\", \"iterationCount\", \"delay\", \"easing\", \"playSpeed\"]\n*/\nexport const OPTIONS: OptionType = [DURATION, FILL_MODE, DIRECTION, ITERATION_COUNT, DELAY, EASING, PLAY_SPEED];\n\n/**\n* Event name list\n* @name Scene.EVENTS\n* @memberof Scene\n* @static\n* @type {$ts:EventType}\n* @example\n* Scene.EVENTS // [\"paused\", \"ended\", \"timeupdate\", \"animate\", \"play\", \"iteration\"];\n*/\nexport const EVENTS: EventType = [PAUSED, ENDED, TIMEUPDATE, ANIMATE, PLAY, ITERATION];\n","import { isString } from \"@daybrush/utils\";\nimport { PropertyObjectState } from \"./types\";\n\n/**\n* Make string, array to PropertyObject for the dot product\n*/\nclass PropertyObject implements PropertyObjectState {\n    public value: any[];\n    public prefix: string = \"\";\n    public suffix: string = \"\";\n    public model: string = \"\";\n    public type: string = \"\";\n    public separator: string = \",\";\n\n    /**\n      * @param - This value is in the array format.\n      * @param - options\n      * @example\n  var obj = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\"\n  });\n       */\n    constructor(value: string | any[], options?: Partial<PropertyObjectState>) {\n        options && this.setOptions(options);\n        this.value = isString(value) ? value.split(this.separator) : value;\n    }\n    public setOptions(newOptions: Partial<PropertyObjectState>) {\n        for (const name in newOptions) {\n            this[name as keyof PropertyObjectState] = newOptions[name as keyof PropertyObjectState];\n        }\n        return this;\n    }\n    /**\n      * the number of values.\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n\n  console.log(obj1.length);\n  // 3\n       */\n    public size() {\n        return this.value.length;\n    }\n    /**\n      * retrieve one of values at the index\n      * @param {Number} index - index\n      * @return {Object} one of values at the index\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n\n  console.log(obj1.get(0));\n  // 1\n       */\n    public get(index: number) {\n        return this.value[index];\n    }\n    /**\n      * Set the value at that index\n      * @param {Number} index - index\n      * @param {Object} value - text, a number, object to set\n      * @return {PropertyObject} An instance itself\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  obj1.set(0, 2);\n  console.log(obj1.toValue());\n  // 2,2,3\n       */\n    public set(index: number, value: any) {\n        this.value[index] = value;\n        return this;\n    }\n    /**\n      * create a copy of an instance itself.\n      * @return {PropertyObject} clone\n      * @example\n  const obj1 = new PropertyObject(\"1,2,3\", \",\");\n  const obj2 = obj1.clone();\n       */\n    public clone(): PropertyObject {\n        const {\n            separator,\n            prefix,\n            suffix,\n            model,\n            type,\n        } = this;\n        const arr = this.value.map(v => ((v instanceof PropertyObject) ? v.clone() : v));\n        return new PropertyObject(arr, {\n            separator,\n            prefix,\n            suffix,\n            model,\n            type,\n        });\n    }\n    /**\n      * Make Property Object to String\n      * @return {String} Make Property Object to String\n      * @example\n  //rgba(100, 100, 100, 0.5)\n  const obj4 = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\",\n  });\n  console.log(obj4.toValue());\n  // \"rgba(100,100,100,0.5)\"\n      */\n    public toValue(): string {\n        return this.prefix + this.join() + this.suffix;\n    }\n    /**\n      * Make Property Object's array to String\n      * @return {String} Join the elements of an array into a string\n      * @example\n      //rgba(100, 100, 100, 0.5)\n      var obj4 = new PropertyObject([100,100,100,0.5], {\n          \"separator\" : \",\",\n          \"prefix\" : \"rgba(\",\n          \"suffix\" : \")\"\n      });\n      obj4.join();  // =>   \"100,100,100,0.5\"\n       */\n    public join() {\n        return this.value.map(v => ((v instanceof PropertyObject) ? v.toValue() : v)).join(this.separator);\n    }\n    /**\n      * executes a provided function once per array element.\n      * @param {Function} callback - Function to execute for each element, taking three arguments\n      * @param {All} [callback.currentValue] The current element being processed in the array.\n      * @param {Number} [callback.index] The index of the current element being processed in the array.\n      * @param {Array} [callback.array] the array.\n      * @return {PropertyObject} An instance itself\n      * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach|MDN Array.forEach()} reference to MDN document.\n      * @example\n  //rgba(100, 100, 100, 0.5)\n  var obj4 = new PropertyObject([100,100,100,0.5], {\n      \"separator\" : \",\",\n      \"prefix\" : \"rgba(\",\n      \"suffix\" : \")\"\n  });\n\n  obj4.forEach(t => {\n      console.log(t);\n  });  // =>   \"100,100,100,0.5\"\n      */\n    public forEach(func: (value?: any, index?: number, array?: any[]) => void) {\n        this.value.forEach(func);\n        return this;\n    }\n}\nexport default PropertyObject;\n","/**\n* @namespace\n* @name Property\n*/\n\nimport PropertyObject from \"../PropertyObject\";\nimport {\n    COLOR_MODELS, isString,\n    splitComma, splitSpace, stringToRGBA,\n    RGBA, splitBracket, IObject, isArray, splitText\n} from \"@daybrush/utils\";\nimport { NameType } from \"../types\";\n\nexport function splitStyle(str: string) {\n\n    const properties = splitText(str, \";\");\n    const obj: IObject<string | PropertyObject> = {};\n    const totalLength = properties.length;\n    let length = totalLength;\n\n    for (let i = 0; i < totalLength; ++i) {\n        const matches = splitText(properties[i], \":\");\n\n        if (matches.length < 2 || !matches[1]) {\n            --length;\n            continue;\n        }\n        obj[matches[0].trim()] = toPropertyObject(matches[1].trim());\n    }\n    return { styles: obj, length };\n}\n/**\n* convert array to PropertyObject[type=color].\n* default model \"rgba\"\n* @memberof Property\n* @function arrayToColorObject\n* @param {Array|PropertyObject} value ex) [0, 0, 0, 1]\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\narrayToColorObject([0, 0, 0])\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0, 1], separator=\",\")\n*/\nexport function arrayToColorObject(arr: number[]) {\n    const model = RGBA;\n\n    if (arr.length === 3) {\n        arr[3] = 1;\n    }\n    return new PropertyObject(arr, {\n        model,\n        separator: \",\",\n        type: \"color\",\n        prefix: `${model}(`,\n        suffix: \")\",\n    });\n}\n/**\n* convert text with parentheses to object.\n* @memberof Property\n* @function stringToBracketObject\n* @param {String} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject\n* @example\nstringToBracketObject(\"abcde(0, 0, 0,1)\")\n// => PropertyObject(model=\"abcde\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToBracketObject(text: string) {\n    // [prefix, value, other]\n    const { prefix: model, value, suffix: afterModel } = splitBracket(text);\n\n    if (typeof value === \"undefined\") {\n        return text;\n    }\n    if (COLOR_MODELS.indexOf(model) > -1) {\n        return arrayToColorObject(stringToRGBA(text));\n    }\n    // divide comma(,)\n    const obj = toPropertyObject(value, model);\n\n    let arr = [value];\n    let separator = \",\";\n    let prefix = `${model}(`;\n    let suffix = `)${afterModel}`;\n\n    if (obj instanceof PropertyObject) {\n        separator = obj.separator;\n        arr = obj.value;\n        prefix += obj.prefix;\n        suffix = obj.suffix + suffix;\n    }\n    return new PropertyObject(arr, {\n        separator,\n        model,\n        prefix,\n        suffix,\n    });\n}\n\nexport function arrayToPropertyObject(arr: any[], separator: string) {\n    return new PropertyObject(arr, {\n        type: \"array\",\n        separator,\n    });\n}\n\n/**\n* convert text with parentheses to PropertyObject[type=color].\n* If the values are not RGBA model, change them RGBA mdoel.\n* @memberof Property\n* @function stringToColorObject\n* @param {String|PropertyObject} value ex) \"rgba(0,0,0,1)\"\n* @return {PropertyObject} PropertyObject[type=color]\n* @example\nstringToColorObject(\"rgba(0, 0, 0,1)\")\n// => PropertyObject(type=\"color\", model=\"rgba\", value=[0, 0, 0,1], separator=\",\")\n*/\nexport function stringToColorObject(value: string): string | PropertyObject {\n    const result = stringToRGBA(value);\n\n    return result ? arrayToColorObject(result) : value;\n}\n/**\n* convert CSS Value to PropertyObject\n* @memberof Property\n* @function toPropertyObject\n* @param {String} value it's text contains the array.\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @see referenced regular expression {@link http://stackoverflow.com/questions/20215440/parse-css-gradient-rule-with-javascript-regex}\n* @example\ntoPropertyObject(\"1px solid #000\");\n// => PropertyObject([\"1px\", \"solid\", rgba(0, 0, 0, 1)])\n*/\nexport function toPropertyObject(value: any[], model?: NameType): PropertyObject;\nexport function toPropertyObject(value: IObject<any>, model?: NameType): IObject<any>;\nexport function toPropertyObject(value: string, model?: NameType): PropertyObject | string;\nexport function toPropertyObject(value: string | IObject<any> | any[], model?: NameType) {\n    if (!isString(value)) {\n        if (isArray(value)) {\n            return arrayToPropertyObject(value, \",\");\n        }\n        return value;\n    }\n    let values: any = splitComma(value);\n\n    if (values.length > 1) {\n        return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \",\");\n    }\n    values = splitSpace(value);\n\n    if (values.length > 1) {\n        return arrayToPropertyObject(values.map(v => toPropertyObject(v)), \" \");\n    }\n    values = /^(['\"])([^'\"]*)(['\"])$/g.exec(value);\n\n    if (values && values[1] === values[3]) {\n        // Quotes\n        return new PropertyObject([toPropertyObject(values[2])], {\n            prefix: values[1],\n            suffix: values[1],\n        });\n    } else if (value.indexOf(\"(\") !== -1) {\n        // color\n        return stringToBracketObject(value);\n    } else if (value.charAt(0) === \"#\" && model !== \"url\") {\n        return stringToColorObject(value);\n    }\n    return value;\n}\nexport function toObject(object: PropertyObject, result: IObject<any> = {}) {\n    const model = object.model;\n\n    if (model) {\n        object.setOptions({\n            model: \"\",\n            suffix: \"\",\n            prefix: \"\",\n        });\n        const value = object.size() > 1 ? object : object.get(0);\n\n        result[model] = value;\n    } else {\n        object.forEach(obj => {\n            toObject(obj, result);\n        });\n    }\n    return result;\n}\n","import {\n    ROLES, MAXIMUM, FIXED, ALIAS,\n    RUNNING, PLAY, ENDED, PLAY_CSS, CURRENT_TIME, START_ANIMATION, EASINGS, NAME_SEPARATOR\n} from \"./consts\";\nimport PropertyObject from \"./PropertyObject\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport {\n    isArray, ANIMATION, ARRAY, OBJECT,\n    PROPERTY, STRING, NUMBER, IS_WINDOW, IObject, $, isObject, addEvent, removeEvent, isString,\n} from \"@daybrush/utils\";\nimport { EasingType, EasingFunction, NameType } from \"./types\";\nimport { toPropertyObject } from \"./utils/property\";\nimport { bezier, steps } from \"./easing\";\nimport Animator from \"./Animator\";\n\nexport function isPropertyObject(value: any): value is PropertyObject {\n    return value instanceof PropertyObject;\n}\nexport function setAlias(name: string, alias: string[]) {\n    ALIAS[name] = alias;\n}\nexport function setRole(names: string[], isProperty?: boolean, isFixedProperty?: boolean) {\n    const length = names.length;\n    let roles: any = ROLES;\n    let fixed: any = FIXED;\n\n    for (let i = 0; i < length - 1; ++i) {\n        !roles[names[i]] && (roles[names[i]] = {});\n        roles = roles[names[i]];\n        if (isFixedProperty) {\n            !fixed[names[i]] && (fixed[names[i]] = {});\n            fixed = fixed[names[i]];\n        }\n    }\n    isFixedProperty && (fixed[names[length - 1]] = true);\n    roles[names[length - 1]] = isProperty ? true : {};\n}\nexport function getType(value: any) {\n    const type = typeof value;\n\n    if (type === OBJECT) {\n        if (isArray(value)) {\n            return ARRAY;\n        } else if (isPropertyObject(value)) {\n            return PROPERTY;\n        }\n    } else if (type === STRING || type === NUMBER) {\n        return \"value\";\n    }\n    return type;\n}\nexport function isPureObject(obj: any): obj is object {\n    return isObject(obj) && obj.constructor === Object;\n}\nexport function getNames(names: IObject<any>, stack: string[]) {\n    let arr: string[][] = [];\n\n    if (isPureObject(names)) {\n        for (const name in names) {\n            stack.push(name);\n            arr = arr.concat(getNames(names[name], stack));\n            stack.pop();\n        }\n    } else {\n        arr.push(stack.slice());\n    }\n    return arr;\n}\nexport function updateFrame(names: IObject<any>, properties: IObject<any>) {\n    for (const name in properties) {\n        const value = properties[name];\n\n        if (!isPureObject(value)) {\n            names[name] = true;\n            continue;\n        }\n        if (!isObject(names[name])) {\n            names[name] = {};\n        }\n        updateFrame(names[name], properties[name]);\n    }\n    return names;\n}\nexport function toFixed(num: number) {\n    return Math.round(num * MAXIMUM) / MAXIMUM;\n}\nexport function getValueByNames(\n    names: Array<string | number>,\n    properties: IObject<any>, length: number = names.length) {\n    let value = properties;\n\n    for (let i = 0; i < length; ++i) {\n        if (!isObject(value) || value == null) {\n            return undefined;\n        }\n        value = value[names[i]];\n    }\n    return value;\n}\nexport function isInProperties(roles: IObject<any>, args: NameType[], isLast?: boolean) {\n    const length = args.length;\n    let role: any = roles;\n\n    if (length === 0) {\n        return false;\n    }\n    for (let i = 0; i < length; ++i) {\n        if (role === true) {\n            return false;\n        }\n        role = role[args[i]];\n        if (!role || (!isLast && role === true)) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * @memberof Scene\n * @param - Property names\n * @param - Whether the property is the last property that cannot be an object (non-partitionable)\n */\nexport function isRole(args: NameType[], isLast?: boolean): boolean {\n    return isInProperties(ROLES, args, isLast);\n}\nexport function isFixed(args: NameType[]) {\n    return isInProperties(FIXED, args, true);\n}\n\nexport interface IterationInterface {\n    currentTime: number;\n    iterationCount: number;\n    elapsedTime: number;\n}\nexport function setPlayCSS(item: Animator, isActivate: boolean) {\n    item.state[PLAY_CSS] = isActivate;\n}\nexport function isPausedCSS(item: Scene | SceneItem) {\n    return item.state[PLAY_CSS] && item.isPaused();\n}\nexport function isEndedCSS(item: Scene | SceneItem) {\n    return !item.isEnded() && item.state[PLAY_CSS];\n}\n\nexport function makeId(selector?: boolean) {\n    for (; ;) {\n        const id = `${Math.floor(Math.random() * 10000000)}`;\n\n        if (!IS_WINDOW || !selector) {\n            return id;\n        }\n        const checkElement = $(`[data-scene-id=\"${id}\"]`);\n\n        if (!checkElement) {\n            return id;\n        }\n    }\n}\nexport function getRealId(item: Scene | SceneItem) {\n    return item.getId() || item.setId(makeId(false)).getId();\n}\nexport function toId(text: number | string) {\n    return `${text}`.match(/[0-9a-zA-Z]+/g).join(\"\");\n}\nexport function playCSS(\n    item: Scene | SceneItem, isExportCSS?: boolean,\n    playClassName?: string, properties: object = {}) {\n    if (!ANIMATION || item.getPlayState() === RUNNING) {\n        return;\n    }\n    const className = playClassName || START_ANIMATION;\n\n    if (isPausedCSS(item)) {\n        item.addPlayClass(true, className, properties);\n    } else {\n        if (item.isEnded()) {\n            item.setTime(0);\n        }\n        isExportCSS && item.exportCSS({ className });\n        const el = item.addPlayClass(false, className, properties);\n\n        if (!el) {\n            return;\n        }\n        addAnimationEvent(item, el);\n        setPlayCSS(item, true);\n    }\n    item.setPlayState(RUNNING);\n}\n\nexport function addAnimationEvent(item: Animator, el: Element) {\n    const state = item.state;\n    const duration = item.getDuration();\n    const isZeroDuration = !duration || !isFinite(duration);\n    const animationend = () => {\n        setPlayCSS(item, false);\n        item.finish();\n    };\n    const animationstart = () => {\n        item.trigger(PLAY);\n\n        addEvent(el, \"animationcancel\", animationend);\n        addEvent(el, \"animationend\", animationend);\n        addEvent(el, \"animationiteration\", animationiteration);\n    };\n    item.once(ENDED, () => {\n        removeEvent(el, \"animationcancel\", animationend);\n        removeEvent(el, \"animationend\", animationend);\n        removeEvent(el, \"animationiteration\", animationiteration);\n        removeEvent(el, \"animationstart\", animationstart);\n    });\n    const animationiteration = ({ elapsedTime }: any) => {\n        const currentTime = elapsedTime;\n        const iterationCount = isZeroDuration ? 0 : (currentTime / duration);\n\n        state[CURRENT_TIME] = currentTime;\n        item.setIteration(iterationCount);\n    };\n    addEvent(el, \"animationstart\", animationstart);\n}\n\nexport function getEasing(curveArray: string | number[] | EasingFunction): EasingType {\n    let easing: EasingType;\n\n    if (isString(curveArray)) {\n        if (curveArray in EASINGS) {\n            easing = EASINGS[curveArray];\n        } else {\n            const obj = toPropertyObject(curveArray);\n\n            if (isString(obj)) {\n                return 0;\n            } else {\n                if (obj.model === \"cubic-bezier\") {\n                    curveArray = obj.value.map(v => parseFloat(v));\n                    easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n                } else if (obj.model === \"steps\") {\n                    easing = steps(parseFloat(obj.value[0]), obj.value[1]);\n                } else {\n                    return 0;\n                }\n            }\n        }\n    } else if (isArray(curveArray)) {\n        easing = bezier(curveArray[0], curveArray[1], curveArray[2], curveArray[3]);\n    } else {\n        easing = curveArray;\n    }\n\n    return easing;\n}\n","import {\n    THRESHOLD,\n    ALTERNATE, ALTERNATE_REVERSE, REVERSE, INFINITE, NORMAL,\n    ITERATION_COUNT, DELAY, FILL_MODE, DIRECTION, PLAY_SPEED,\n    DURATION, EASING, ITERATION_TIME, EASING_NAME, PAUSED,\n    RUNNING, PLAY, TIMEUPDATE, ENDED, PLAY_STATE, PREV_TIME, TICK_TIME, CURRENT_TIME, ITERATION, OPTIONS} from \"./consts\";\nimport { toFixed, getEasing } from \"./utils\";\nimport { splitUnit, isString, camelize, requestAnimationFrame, cancelAnimationFrame } from \"@daybrush/utils\";\nimport {\n    IterationCountType, DirectionType, AnimatorState,\n    EasingFunction, FillModeType, PlayStateType, EasingType, AnimatorOptions, AnimatorEvents,\n} from \"./types\";\nimport EventEmitter from \"@scena/event-emitter\";\n\nfunction GetterSetter<T extends new (...args: any[]) => {}>(\n    getter: string[], setter: string[], parent: string) {\n    return (constructor: T) => {\n        const prototype = constructor.prototype;\n\n        getter.forEach(name => {\n            prototype[camelize(`get ${name}`)] = function() {\n                return this[parent][name];\n            };\n        });\n        setter.forEach(name => {\n            prototype[camelize(`set ${name}`)] = function(value: any) {\n                this[parent][name] = value;\n                return this;\n            };\n        });\n    };\n}\nexport function isDirectionReverse(iteration: number, iteraiontCount: IterationCountType, direction: DirectionType) {\n    if (direction === REVERSE) {\n        return true;\n    } else if (iteraiontCount !== INFINITE && iteration === iteraiontCount && iteraiontCount % 1 === 0) {\n        return direction === (iteration % 2 >= 1 ? ALTERNATE_REVERSE : ALTERNATE);\n    }\n    return direction === (iteration % 2 >= 1 ? ALTERNATE : ALTERNATE_REVERSE);\n}\n/**\n* @typedef {Object} AnimatorState The Animator options. Properties used in css animation.\n* @property {number} [duration] The duration property defines how long an animation should take to complete one cycle.\n* @property {\"none\"|\"forwards\"|\"backwards\"|\"both\"} [fillMode] The fillMode property specifies a style for the element when the animation is not playing (before it starts, after it ends, or both).\n* @property {\"infinite\"|number} [iterationCount] The iterationCount property specifies the number of times an animation should be played.\n* @property {array|function} [easing] The easing(timing-function) specifies the speed curve of an animation.\n* @property {number} [delay] The delay property specifies a delay for the start of an animation.\n* @property {\"normal\"|\"reverse\"|\"alternate\"|\"alternate-reverse\"} [direction] The direction property defines whether an animation should be played forwards, backwards or in alternate cycles.\n*/\n\nconst setters = [\"id\", ITERATION_COUNT, DELAY, FILL_MODE,\n    DIRECTION, PLAY_SPEED, DURATION, PLAY_SPEED, ITERATION_TIME, PLAY_STATE];\nconst getters = [...setters, EASING, EASING_NAME];\n\n/**\n* play video, animation, the others\n* @extends EventEmitter\n* @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n*/\n@GetterSetter(getters, setters, \"state\")\nclass Animator <\n    Options extends AnimatorOptions = AnimatorOptions,\n    State extends AnimatorState = AnimatorState,\n    Events extends {} = {},\n> extends EventEmitter<AnimatorEvents & Events> {\n    public state: State;\n    private timerId: number = 0;\n\n    /**\n     * @param - animator's options\n     * @example\n  const animator = new Animator({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.easing.EASE,\n  });\n     */\n    constructor(options?: Partial<Options & AnimatorOptions>) {\n        super();\n        this.state = {\n            id: \"\",\n            easing: 0,\n            easingName: \"linear\",\n            iterationCount: 1,\n            delay: 0,\n            fillMode: \"forwards\",\n            direction: NORMAL,\n            playSpeed: 1,\n            currentTime: 0,\n            iterationTime: -1,\n            iteration: 0,\n            tickTime: 0,\n            prevTime: 0,\n            playState: PAUSED,\n            duration: 0,\n        } as State;\n        this.setOptions(options);\n    }\n    /**\n      * set animator's easing.\n      * @param curverArray - The speed curve of an animation.\n      * @return {Animator} An instance itself.\n      * @example\n  animator.({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.easing.EASE,\n  });\n      */\n    public setEasing(curveArray: string | number[] | EasingFunction): this {\n        const easing: EasingType = getEasing(curveArray);\n        const easingName = easing && easing[EASING_NAME] || \"linear\";\n        const state = this.state;\n\n        state[EASING] = easing;\n        state[EASING_NAME] = easingName;\n        return this;\n    }\n    /**\n      * set animator's options.\n      * @see {@link https://www.w3schools.com/css/css3_animations.asp|CSS3 Animation}\n      * @param - animator's options\n      * @return {Animator} An instance itself.\n      * @example\n  animator.({\n      delay: 2,\n      diretion: \"alternate\",\n      duration: 2,\n      fillMode: \"forwards\",\n      iterationCount: 3,\n      easing: Scene.eaasing.EASE,\n  });\n      */\n    public setOptions(options: Partial<AnimatorOptions> = {}): this {\n        for (const name in options) {\n            const value = options[name];\n\n            if (name === EASING) {\n                this.setEasing(value);\n                continue;\n            } else if (name === DURATION) {\n                value && this.setDuration(value);\n                continue;\n            }\n            if (OPTIONS.indexOf(name as any) > -1) {\n                this.state[name] = value;\n            }\n        }\n\n        return this;\n    }\n    /**\n      * Get the animator's total duration including delay\n      * @return {number} Total duration\n      * @example\n  animator.getTotalDuration();\n      */\n    public getTotalDuration(): number {\n        return this.getActiveDuration(true);\n    }\n    /**\n      * Get the animator's total duration excluding delay\n      * @return {number} Total duration excluding delay\n      * @example\n  animator.getActiveDuration();\n      */\n    public getActiveDuration(delay?: boolean): number {\n        const state = this.state;\n        const count = state[ITERATION_COUNT];\n        if (count === INFINITE) {\n            return Infinity;\n        }\n        return (delay ? state[DELAY] : 0) + this.getDuration() * count;\n    }\n    /**\n      * Check if the animator has reached the end.\n      * @return {boolean} ended\n      * @example\n  animator.isEnded(); // true or false\n      */\n    public isEnded(): boolean {\n        if (this.state[TICK_TIME] === 0 && this.state[PLAY_STATE] === PAUSED) {\n            return true;\n        } else if (this.getTime() < this.getActiveDuration()) {\n            return false;\n        }\n        return true;\n    }\n    /**\n      *Check if the animator is paused:\n      * @return {boolean} paused\n      * @example\n  animator.isPaused(); // true or false\n      */\n    public isPaused(): boolean {\n        return this.state[PLAY_STATE] === PAUSED;\n    }\n    public start(delay: number = this.state[DELAY]): boolean {\n        const state = this.state;\n\n        state[PLAY_STATE] = RUNNING;\n\n        if (state[TICK_TIME] >= delay) {\n            /**\n             * This event is fired when play animator.\n             * @event Animator#play\n             */\n            this.trigger<\"play\", AnimatorEvents[\"play\"]>(PLAY);\n            return true;\n        }\n        return false;\n    }\n    /**\n      * play animator\n      * @return {Animator} An instance itself.\n      */\n    public play(toTime?: number) {\n        const state = this.state;\n        const delay = state[DELAY];\n        const currentTime = this.getTime();\n\n        state[PLAY_STATE] = RUNNING;\n\n        if (this.isEnded() && (currentTime === 0 || currentTime >= this.getActiveDuration())) {\n            this.setTime(-delay, true);\n        }\n\n        this.timerId = requestAnimationFrame((time: number) => {\n            state[PREV_TIME] = time;\n            this.tick(time, toTime);\n        });\n        this.start();\n        return this;\n    }\n    /**\n      * pause animator\n      * @return {Animator} An instance itself.\n      */\n    public pause(): this {\n        const state = this.state;\n\n        if (state[PLAY_STATE] !== PAUSED) {\n            state[PLAY_STATE] = PAUSED;\n            /**\n             * This event is fired when animator is paused.\n             * @event Animator#paused\n             */\n            this.trigger<\"paused\", AnimatorEvents[\"paused\"]>(PAUSED);\n        }\n        cancelAnimationFrame(this.timerId);\n        return this;\n    }\n    /**\n       * end animator\n       * @return {Animator} An instance itself.\n      */\n    public finish() {\n        this.setTime(0);\n        this.state[TICK_TIME] = 0;\n        this.end();\n        return this;\n    }\n    /**\n       * end animator\n       * @return {Animator} An instance itself.\n      */\n    public end() {\n        this.pause();\n        /**\n             * This event is fired when animator is ended.\n             * @event Animator#ended\n             */\n        this.trigger<\"ended\", AnimatorEvents[\"ended\"]>(ENDED);\n        return this;\n    }\n    /**\n      * set currentTime\n      * @param {Number|String} time - currentTime\n      * @return {Animator} An instance itself.\n      * @example\n\n  animator.setTime(\"from\"); // 0\n  animator.setTime(\"to\"); // 100%\n  animator.setTime(\"50%\");\n  animator.setTime(10);\n  animator.getTime() // 10\n      */\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean) {\n        const activeDuration = this.getActiveDuration();\n        const state = this.state;\n        const prevTime = state[TICK_TIME];\n        const delay = state[DELAY];\n        let currentTime = isTick ? (time as number) : this.getUnitTime(time);\n\n        state[TICK_TIME] = delay + currentTime;\n        if (currentTime < 0) {\n            currentTime = 0;\n        } else if (currentTime > activeDuration) {\n            currentTime = activeDuration;\n        }\n        state[CURRENT_TIME] = currentTime;\n        this.calculate();\n\n        if (isTick && !isParent) {\n            const tickTime = state[TICK_TIME];\n\n            if (prevTime < delay && time >= 0) {\n                this.start(0);\n            }\n            if (tickTime < prevTime || this.isEnded()) {\n                this.end();\n                return;\n            }\n        }\n        if (this.isDelay()) {\n            return this;\n        }\n        /**\n             * This event is fired when the animator updates the time.\n             * @event Animator#timeupdate\n             * @param {Object} param The object of data to be sent to an event.\n             * @param {Number} param.currentTime The total time that the animator is running.\n             * @param {Number} param.time The iteration time during duration that the animator is running.\n             * @param {Number} param.iterationCount The iteration count that the animator is running.\n             */\n        this.trigger<\"timeupdate\", AnimatorEvents[\"timeupdate\"]>(TIMEUPDATE, {\n            currentTime,\n            time: this.getIterationTime(),\n            iterationCount: state[ITERATION],\n        });\n\n        return this;\n    }\n    /**\n      * Get the animator's current time\n      * @return {number} current time\n      * @example\n  animator.getTime();\n      */\n    public getTime(): number {\n        return this.state[CURRENT_TIME];\n    }\n    public getUnitTime(time: string | number) {\n        if (isString(time)) {\n            const duration = this.getDuration() || 100;\n\n            if (time === \"from\") {\n                return 0;\n            } else if (time === \"to\") {\n                return duration;\n            }\n            const { unit, value } = splitUnit(time);\n\n            if (unit === \"%\") {\n                !this.getDuration() && (this.setDuration(duration));\n                return toFixed(parseFloat(time) / 100 * duration);\n            } else if (unit === \">\") {\n                return value + THRESHOLD;\n            } else {\n                return value;\n            }\n        } else {\n            return toFixed(time);\n        }\n    }\n    /**\n       * Check if the current state of animator is delayed.\n       * @return {boolean} check delay state\n       */\n    public isDelay() {\n        const state = this.state;\n        const delay = state[DELAY];\n        const tickTime = state[TICK_TIME];\n\n        return delay > 0 && (tickTime < delay);\n    }\n    public setIteration(iterationCount: number): this {\n        const state = this.state;\n        const passIterationCount = Math.floor(iterationCount);\n        const maxIterationCount = state[ITERATION_COUNT] === INFINITE ? Infinity : state[ITERATION_COUNT];\n\n        if (state[ITERATION] < passIterationCount && passIterationCount < maxIterationCount) {\n            /**\n                  * The event is fired when an iteration of an animation ends.\n                  * @event Animator#iteration\n                  * @param {Object} param The object of data to be sent to an event.\n                  * @param {Number} param.currentTime The total time that the animator is running.\n                  * @param {Number} param.iterationCount The iteration count that the animator is running.\n                  */\n            this.trigger<\"iteration\", AnimatorEvents[\"iteration\"]>(ITERATION, {\n                currentTime: state[CURRENT_TIME],\n                iterationCount: passIterationCount,\n            });\n        }\n        state[ITERATION] = iterationCount;\n        return this;\n    }\n    protected calculate() {\n        const state = this.state;\n        const iterationCount = state[ITERATION_COUNT];\n        const fillMode = state[FILL_MODE];\n        const direction = state[DIRECTION];\n        const duration = this.getDuration();\n        const time = this.getTime();\n        const iteration = duration === 0 ? 0 : time / duration;\n        let currentIterationTime = duration ? time % duration : 0;\n\n        if (!duration) {\n            this.setIterationTime(0);\n            return this;\n        }\n        this.setIteration(iteration);\n\n        // direction : normal, reverse, alternate, alternate-reverse\n        // fillMode : forwards, backwards, both, none\n        const isReverse = isDirectionReverse(iteration, iterationCount, direction);\n\n        const isFiniteDuration = isFinite(duration);\n        if (isFiniteDuration && isReverse) {\n            currentIterationTime = duration - currentIterationTime;\n        }\n        if (isFiniteDuration && iterationCount !== INFINITE) {\n            const isForwards = fillMode === \"both\" || fillMode === \"forwards\";\n\n            // fill forwards\n            if (iteration >= iterationCount) {\n                currentIterationTime = duration * (isForwards ? (iterationCount % 1) || 1 : 0);\n                isReverse && (currentIterationTime = duration - currentIterationTime);\n            }\n        }\n        this.setIterationTime(currentIterationTime);\n        return this;\n    }\n    private tick(now: number, to?: number) {\n        if (this.isPaused()) {\n            return;\n        }\n        const state = this.state;\n        const playSpeed = state[PLAY_SPEED];\n        const prevTime = state[PREV_TIME];\n        const delay = state[DELAY];\n        const tickTime = state[TICK_TIME];\n        const currentTime = tickTime + Math.min(1000, now - prevTime) / 1000 * playSpeed;\n\n        state[PREV_TIME] = now;\n        this.setTime(currentTime - delay, true);\n        if (to && to * 1000 < now) {\n            this.pause();\n        }\n        if (state[PLAY_STATE] === PAUSED) {\n            return;\n        }\n\n        this.timerId = requestAnimationFrame((time: number) => {\n            this.tick(time, to);\n        });\n    }\n}\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#setId\n * @param {number | string} - String or number of id to be set in the animator\n * @return {Animator} An instance itself.\n */\n/**\n * Specifies the unique indicator of the animator\n * @method Animator#getId\n * @return {number | string} the indicator of the item.\n */\n/**\n * Get a delay for the start of an animation.\n * @method Animator#getDelay\n * @return {number} delay\n */\n/**\n * Set a delay for the start of an animation.\n * @method Animator#setDelay\n * @param {number} delay - delay\n * @return {Animator} An instance itself.\n */\n/**\n * Get fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#getFillMode\n * @return {FillModeType} fillMode\n */\n/**\n * Set fill mode for the item when the animation is not playing (before it starts, after it ends, or both)\n * @method Animator#setFillMode\n * @param {FillModeType} fillMode - fillMode\n * @return {Animator} An instance itself.\n */\n/**\n * Get the number of times an animation should be played.\n * @method Animator#getIterationCount\n * @return {IterationCountType} iterationCount\n */\n/**\n * Set the number of times an animation should be played.\n * @method Animator#setIterationCount\n * @param {IterationCountType} iterationCount - iterationCount\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#getDirection\n * @return {DirectionType} direction\n */\n/**\n * Set whether an animation should be played forwards, backwards or in alternate cycles.\n * @method Animator#setDirection\n * @param {DirectionType} direction - direction\n * @return {Animator} An instance itself.\n */\n/**\n * Get whether the animation is running or paused.\n * @method Animator#getPlayState\n * @return {PlayStateType} playState\n */\n/**\n * Set whether the animation is running or paused.\n * @method Animator#setPlayState\n * @param {PlayStateType} playState - playState\n * @return {Animator} An instance itself.\n */\n/**\n * Get the animator's play speed\n * @method Animator#getPlaySpeed\n * @return {number} playSpeed\n */\n/**\n * Set the animator's play speed\n * @method Animator#setPlaySpeed\n * @param {number} playSpeed - playSpeed\n * @return {Animator} An instance itself.\n */\n/**\n * Get how long an animation should take to complete one cycle.\n * @method Animator#getDuration\n * @return {number} duration\n */\n/**\n * Set how long an animation should take to complete one cycle.\n * @method Animator#setDuration\n * @param {number} duration - duration\n * @return {Animator} An instance itself.\n */\n/**\n * Get the speed curve of an animation.\n * @method Animator#getEasing\n * @return {EasingType} easing\n */\n/**\n * Get the speed curve's name\n * @method Animator#getEasingName\n * @return {string} the curve's name.\n */\n/**\n\t* Get the animator's current iteration time\n\t* @method Animator#getIterationTime\n\t* @return {number} current iteration time\n\t* @example\nanimator.getIterationTime();\n\t*/\n\n// tslint:disable-next-line:interface-name\ninterface Animator <\n    Options extends AnimatorOptions = AnimatorOptions,\n    State extends AnimatorState = AnimatorState,\n    Events extends {} = {},\n> extends EventEmitter<AnimatorEvents & Events> {\n    setId(id: number | string): this;\n    getId(): number | string;\n    getIterationTime(): number;\n    setIterationTime(time: number): this;\n    setDelay(delay: number): this;\n    getDelay(): number;\n    setFillMode(fillMode: FillModeType): this;\n    getFillMode(): FillModeType;\n    setIterationCount(iterationCount: IterationCountType): this;\n    getIterationCount(): IterationCountType;\n    setDirection(direction: DirectionType): this;\n    getDirection(): DirectionType;\n    setPlayState(playState: PlayStateType): this;\n    getPlayState(): PlayStateType;\n    setPlaySpeed(playSpeed: number): this;\n    getPlaySpeed(): number;\n    setDuration(duration: number): this;\n    getDuration(): number;\n    getEasing(): EasingType;\n    getEasingName(): string;\n}\nexport default Animator;\n","import {\n    ALIAS, TIMING_FUNCTION, TRANSFORM_NAME, EASING_NAME, NAME_SEPARATOR\n} from \"./consts\";\nimport { isRole, getType, isPropertyObject, getValueByNames, isFixed, getNames, getEasing } from \"./utils\";\nimport { toPropertyObject, splitStyle, toObject } from \"./utils/property\";\nimport {\n    isObject, isArray, isString, getKeys,\n    ANIMATION, TRANSFORM, FILTER, PROPERTY, FUNCTION, ARRAY, OBJECT, IObject, isUndefined,\n    sortOrders,\n} from \"@daybrush/utils\";\nimport { NameType, KeyValueChildren } from \"./types\";\nimport OrderMap from \"order-map\";\n\nfunction toInnerProperties(obj: IObject<string>, orders: NameType[] = []) {\n    if (!obj) {\n        return \"\";\n    }\n    const arrObj = [];\n\n    const keys = getKeys(obj);\n\n    sortOrders(keys, orders);\n\n    keys.forEach(name => {\n        arrObj.push(`${name.replace(/\\d$/g, \"\")}(${obj[name]})`);\n    });\n\n    return arrObj.join(\" \");\n}\n\n/* eslint-disable */\nfunction clone(target: IObject<any>, toValue = false) {\n    return merge({}, target, toValue);\n}\nfunction merge(to: IObject<any>, from: IObject<any>, toValue = false) {\n    for (const name in from) {\n        const value = from[name];\n        const type = getType(value);\n\n        if (type === PROPERTY) {\n            to[name] = toValue ? value.toValue() : value.clone();\n        } else if (type === FUNCTION) {\n            to[name] = toValue ? getValue([name], value) : value;\n        } else if (type === ARRAY) {\n            to[name] = value.slice();\n        } else if (type === OBJECT) {\n            if (isObject(to[name]) && !isPropertyObject(to[name])) {\n                merge(to[name], value, toValue);\n            } else {\n                to[name] = clone(value, toValue);\n            }\n        } else {\n            to[name] = from[name];\n        }\n    }\n    return to;\n}\n/* eslint-enable */\n\nfunction getPropertyName(args: NameType[]) {\n    return args[0] in ALIAS ? ALIAS[args[0]] : args;\n}\nfunction getValue(names: NameType[], value: any): any {\n    const type = getType(value);\n\n    if (type === PROPERTY) {\n        return value.toValue();\n    } else if (type === FUNCTION) {\n        if (names[0] !== TIMING_FUNCTION) {\n            return getValue(names, value());\n        }\n    } else if (type === OBJECT) {\n        return clone(value, true);\n    }\n    return value;\n}\n/**\n* Animation's Frame\n*/\nclass Frame {\n    public properties: IObject<any> = {};\n    public orderMap: OrderMap = new OrderMap(NAME_SEPARATOR);\n    /**\n     * @param - properties\n     * @example\n  const frame = new Scene.Frame({\n      display: \"none\"\n      transform: {\n          translate: \"50px\",\n          scale: \"5, 5\",\n      }\n  });\n     */\n    constructor(properties: any = {}) {\n        this.properties = {};\n        // this.orders = [];\n        this.set(properties);\n    }\n    /**\n      * get property value\n      * @param {...Number|String|PropertyObject} args - property name or value\n      * @example\n      frame.get(\"display\") // => \"none\", \"block\", ....\n      frame.get(\"transform\", \"translate\") // => \"10px,10px\"\n      */\n    public get(...args: NameType[]) {\n        const value = this.raw(...args);\n\n        return getValue(getPropertyName(args), value);\n    }\n    /**\n      * get properties orders\n      * @param - property names\n      * @example\n      frame.getOrders([\"display\"]) // => []\n      frame.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      */\n    public getOrders(names: NameType[]): NameType[] | undefined {\n        return this.orderMap.get(names);\n    }\n    /**\n      * set properties orders\n      * @param - property names\n      * @param - orders\n      * @example\n      frame.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      frame.setOrders([\"transform\"], [\"scale\", \"tralsate\"])\n      */\n    public setOrders(names: NameType[], orders: NameType[]): NameType[] {\n        return this.orderMap.set(names, orders);\n    }\n    /**\n      * get properties order object\n      * @example\n      console.log(frame.getOrderObject());\n      */\n    public getOrderObject() {\n        return this.orderMap.getObject();\n    }\n    /**\n      * set properties orders object\n      * @param - properties orders object\n      * @example\n      frame.setOrderObject({\n          \"\": [\"transform\"],\n          \"transform\": [\"scale\", \"tralsate\"],\n      });\n      */\n    public setOrderObject(obj: IObject<NameType[]>) {\n        this.orderMap.setObject(obj);\n    }\n\n    /**\n      * get property keys\n      * @param - property names\n      * @example\n      frame.gets(\"display\") // => []\n      frame.gets(\"transform\") // => [\"translate\"]\n      */\n    public getKeys(...args: NameType[]): string[] {\n        const value = this.raw(...args);\n        const keys = getType(value) === OBJECT ? getKeys(value) : [];\n\n        sortOrders(keys, this.orderMap.get(args));\n        return keys;\n    }\n    /**\n      * get properties array\n      * @param - property names\n      * @example\n      frame.gets(\"display\") // => []\n      frame.gets(\"transform\") // => [{ key: \"translate\", value: \"10px, 10px\", children: [] }]\n      */\n    public gets(...args: NameType[]): KeyValueChildren[] {\n        const values = this.get(...args);\n        const keys = this.getKeys(...args);\n\n        return keys.map(key => {\n            const nextValue = values[key];\n            return { key, value: nextValue, children: this.gets(...args, key) };\n        });\n    }\n\n    public raw(...args: NameType[]) {\n        return getValueByNames(getPropertyName(args), this.properties);\n    }\n    /**\n      * remove property value\n      * @param {...String} args - property name\n      * @return {Frame} An instance itself\n      * @example\n      frame.remove(\"display\")\n      */\n    public remove(...args: NameType[]) {\n        const params = getPropertyName(args);\n        const length = params.length;\n\n        if (!length) {\n            return this;\n        }\n        this.orderMap.remove(params);\n        const value = getValueByNames(params, this.properties, length - 1);\n\n        if (isObject(value)) {\n            delete value[params[length - 1]];\n        }\n        return this;\n    }\n    /**\n      * set property\n      * @param {...Number|String|PropertyObject} args - property names or values\n      * @return {Frame} An instance itself\n      * @example\n  // one parameter\n  frame.set({\n      display: \"none\",\n      transform: {\n          translate: \"10px, 10px\",\n          scale: \"1\",\n      },\n      filter: {\n          brightness: \"50%\",\n          grayscale: \"100%\"\n      }\n  });\n\n  // two parameters\n  frame.set(\"transform\", {\n      translate: \"10px, 10px\",\n      scale: \"1\",\n  });\n\n  // three parameters\n  frame.set(\"transform\", \"translate\", \"50px\");\n    */\n    public set(...args: any[]) {\n        const self = this;\n        const length = args.length;\n        const params = args.slice(0, -1);\n        const value = args[length - 1];\n        const firstParam = params[0];\n\n        if (length === 1 && value instanceof Frame) {\n            self.merge(value);\n        } else if (firstParam in ALIAS) {\n            self._set(ALIAS[firstParam], value);\n        } else if (length === 2 && isArray(firstParam)) {\n            self._set(firstParam, value);\n        } else if (isPropertyObject(value)) {\n            if (isRole(params)) {\n                self.set(...params, toObject(value));\n            } else {\n                self._set(params, value);\n            }\n        } else if (isArray(value)) {\n            self._set(params, value);\n        } else if (isObject(value)) {\n            if (!self.has(...params) && isRole(params)) {\n                self._set(params, {});\n            }\n            for (const name in value) {\n                self.set(...params, name, value[name]);\n            }\n        } else if (isString(value)) {\n            if (isRole(params, true)) {\n                if (isFixed(params) || !isRole(params)) {\n                    this._set(params, value);\n                } else {\n                    const obj = toPropertyObject(value);\n\n                    if (isObject(obj)) {\n                        self.set(...params, obj);\n                    }\n                }\n                return this;\n            } else {\n                const { styles, length: stylesLength } = splitStyle(value);\n\n                for (const name in styles) {\n                    self.set(...params, name, styles[name]);\n                }\n                if (stylesLength) {\n                    return this;\n                }\n            }\n            self._set(params, value);\n        } else {\n            self._set(params, value);\n        }\n        return self;\n    }\n    /**\n      * Gets the names of properties.\n      * @return the names of properties.\n      * @example\n  // one parameter\n  frame.set({\n      display: \"none\",\n      transform: {\n          translate: \"10px, 10px\",\n          scale: \"1\",\n      },\n  });\n\n  // [[\"display\"], [\"transform\", \"translate\"], [\"transform\", \"scale\"]]\n  console.log(frame.getNames());\n    */\n    public getNames(): string[][] {\n        return getNames(this.properties, []);\n    }\n    /**\n      * check that has property.\n      * @param {...String} args - property name\n      * @example\n      frame.has(\"property\", \"display\") // => true or false\n      */\n    public has(...args: NameType[]) {\n        const params = getPropertyName(args);\n        const length = params.length;\n\n        if (!length) {\n            return false;\n        }\n        return !isUndefined(getValueByNames(params, this.properties, length));\n    }\n    /**\n      * clone frame.\n      * @return {Frame} An instance of clone\n      * @example\n      frame.clone();\n      */\n    public clone() {\n        const frame = new Frame();\n\n        frame.setOrderObject(this.orderMap.orderMap);\n        return frame.merge(this);\n    }\n    /**\n      * merge one frame to other frame.\n      * @param - target frame.\n      * @return {Frame} An instance itself\n      * @example\n      frame.merge(frame2);\n      */\n    public merge(frame: Frame) {\n        const properties = this.properties;\n        const frameProperties = frame.properties;\n\n        if (frameProperties) {\n            merge(properties, frameProperties);\n        }\n        return this;\n    }\n    /**\n      * Specifies an css object that coverted the frame.\n      * @return {object} cssObject\n      */\n    public toCSSObject() {\n        const properties = this.get();\n        const cssObject: IObject<string> = {};\n\n        for (const name in properties) {\n            if (isRole([name], true)) {\n                continue;\n            }\n            const value = properties[name];\n\n            if (name === TIMING_FUNCTION) {\n                cssObject[TIMING_FUNCTION.replace(\"animation\", ANIMATION)] =\n                    (isString(value) ? value : value[EASING_NAME]) || \"initial\";\n            } else {\n                cssObject[name] = value;\n            }\n        }\n        const transform = toInnerProperties(properties[TRANSFORM_NAME], this.orderMap.get([TRANSFORM_NAME]));\n        const filter = toInnerProperties(properties.filter, this.orderMap.get([FILTER]));\n\n        TRANSFORM && transform && (cssObject[TRANSFORM] = transform);\n        FILTER && filter && (cssObject[FILTER] = filter);\n        return cssObject;\n    }\n    /**\n      * Specifies an css text that coverted the frame.\n      * @return {string} cssText\n      */\n    public toCSS() {\n        const cssObject = this.toCSSObject();\n        const cssArray = [];\n        const keys = getKeys(cssObject);\n\n        sortOrders(keys, this.orderMap.get([]));\n        keys.forEach(name => {\n            cssArray.push(`${name}:${cssObject[name]};`);\n        });\n        return cssArray.join(\"\");\n    }\n    /**\n      * Remove All Properties\n      * @return {Frame} An instance itself\n      */\n    public clear() {\n        this.properties = {};\n        this.orderMap.clear();\n        return this;\n    }\n    private _set(args: NameType[], value: any) {\n        let properties = this.properties;\n        const length = args.length;\n\n        for (let i = 0; i < length - 1; ++i) {\n            const name = args[i];\n\n            !(name in properties) && (properties[name] = {});\n            properties = properties[name];\n        }\n        if (!length) {\n            return;\n        }\n        const lastParam = args[length - 1];\n\n        this.orderMap.add(args);\n        if (length === 1 && lastParam === TIMING_FUNCTION) {\n            properties[lastParam] = getEasing(value);\n        } else {\n            properties[lastParam] = isString(value) && !isFixed(args)\n                ? toPropertyObject(value, lastParam)\n                : value;\n        }\n    }\n}\nexport default Frame;\n","\nimport PropertyObject from \"../PropertyObject\";\nimport { getType } from \"../utils\";\nimport { toPropertyObject } from \"./property\";\nimport { splitUnit, PROPERTY, FUNCTION, ARRAY, dot as dotNumber } from \"@daybrush/utils\";\nimport { EasingType } from \"../types\";\n\nfunction dotArray(a1: any[], a2: any, b1: number, b2: number): any {\n  const length = a2.length;\n\n  return a1.map((v1, i) => {\n    if (i >= length) {\n      return v1;\n    } else {\n      return dot(v1, a2[i], b1, b2);\n    }\n  });\n}\n\nfunction dotColor(color1: PropertyObject, color2: PropertyObject, b1: number, b2: number) {\n  // convert array to PropertyObject(type=color)\n  const value1 = color1.value;\n  const value2 = color2.value;\n  // If the model name is not same, the inner product is impossible.\n  const model1 = color1.model;\n  const model2 = color2.model;\n\n  if (model1 !== model2) {\n    // It is recognized as a string.\n    return dot(color1.toValue(), color2.toValue(), b1, b2);\n  }\n  if (value1.length === 3) {\n    value1[3] = 1;\n  }\n  if (value2.length === 3) {\n    value2[3] = 1;\n  }\n  const v = dotArray(value1, value2, b1, b2);\n  const colorModel = model1;\n\n  for (let i = 0; i < 3; ++i) {\n    v[i] = parseInt(v[i], 10);\n  }\n  const object = new PropertyObject(v, {\n    type: \"color\",\n    model: colorModel,\n    prefix: `${colorModel}(`,\n    suffix: \")\",\n  });\n\n  return object;\n}\n\nfunction dotObject(a1: PropertyObject, a2: PropertyObject, b1: number, b2: number) {\n  const a1Type = a1.type;\n\n  if (a1Type === \"color\") {\n    return dotColor(a1, a2, b1, b2);\n  }\n  const value1 = a1.value;\n  const value2 = a2.value;\n  const arr = dotArray(value1, value2, b1, b2);\n\n  return new PropertyObject(arr, {\n    type: a1Type,\n    separator: a1.separator || a2.separator,\n    prefix: a1.prefix || a2.prefix,\n    suffix: a1.suffix || a2.suffix,\n    model: a1.model || a2.model,\n  });\n}\n/**\n* The dot product of a1 and a2 for the b1 and b2.\n* @memberof Dot\n* @function dot\n* @param {String|Number|PropertyObject} a1 value1\n* @param {String|Number|PropertyObject} a2 value2\n* @param {Number} b1 b1 ratio\n* @param {Number} b2 b2 ratio\n* @return {String} Not Array, Not Separator, Only Number & Unit\n* @return {PropertyObject} Array with Separator.\n* @example\ndot(1, 3, 0.3, 0.7);\n// => 1.6\n*/\nexport function dot(a1: any, a2: any, b1: number, b2: number): any {\n  if (b2 === 0) {\n    return a2;\n  } else if (b1 === 0 || b1 + b2 === 0) {\n    // prevent division by zero.\n    return a1;\n  }\n  // dot Object\n\n  const type1 = getType(a1);\n  const type2 = getType(a2);\n  const isFunction1 = type1 === FUNCTION;\n  const isFunction2 = type2 === FUNCTION;\n\n  if (isFunction1 || isFunction2) {\n    return () => {\n      return dot(isFunction1 ? toPropertyObject(a1()) : a1, isFunction2 ? toPropertyObject(a2()) : a2, b1, b2);\n    };\n  } else if (type1 === type2) {\n    if (type1 === PROPERTY) {\n      return dotObject(a1, a2, b1, b2);\n    } else if (type1 === ARRAY) {\n      return dotArray(a1, a2, b1, b2);\n    } else if (type1 !== \"value\") {\n      return a1;\n    }\n  } else {\n    return a1;\n  }\n  const v1 = splitUnit(`${a1}`);\n  const v2 = splitUnit(`${a2}`);\n  let v;\n\n  // 숫자가 아닐경우 첫번째 값을 반환 b2가 0일경우 두번째 값을 반환\n  if (isNaN(v1.value) || isNaN(v2.value)) {\n    return a1;\n  } else {\n    v = dotNumber(v1.value, v2.value, b1, b2);\n  }\n  const prefix = v1.prefix || v2.prefix;\n  const unit = v1.unit || v2.unit;\n\n  if (!prefix && !unit) {\n    return v;\n  }\n  return prefix + v + unit;\n}\n\nexport function dotValue(\n  time: number,\n  prevTime: number,\n  nextTime: number,\n  prevValue: any,\n  nextValue: any,\n  easing?: EasingType) {\n  if (time === prevTime) {\n    return prevValue;\n  } else if (time === nextTime) {\n    return nextValue;\n  } else if (!easing) {\n    return dot(prevValue, nextValue, time - prevTime, nextTime - time);\n  }\n  const ratio = easing((time - prevTime) / (nextTime - prevTime));\n  const value = dot(prevValue, nextValue, ratio, 1 - ratio);\n\n  return value;\n}\n","import Animator, { isDirectionReverse } from \"./Animator\";\nimport Frame from \"./Frame\";\nimport {\n    toFixed,\n    isFixed,\n    playCSS,\n    toId,\n    getRealId,\n    makeId,\n    isPausedCSS,\n    isRole,\n    getValueByNames,\n    isEndedCSS,\n    setPlayCSS,\n    getNames,\n    updateFrame,\n} from \"./utils\";\nimport { dotValue } from \"./utils/dot\";\nimport {\n    START_ANIMATION,\n    PREFIX, THRESHOLD,\n    TIMING_FUNCTION, ALTERNATE, ALTERNATE_REVERSE, INFINITE,\n    REVERSE, EASING, FILL_MODE, DIRECTION, ITERATION_COUNT,\n    EASING_NAME, DELAY, PLAY_SPEED, DURATION, PAUSE_ANIMATION,\n    DATA_SCENE_ID, SELECTOR, ROLES, NAME_SEPARATOR\n} from \"./consts\";\nimport {\n    isObject, isArray, isUndefined, decamelize,\n    ANIMATION, fromCSS, addClass, removeClass, hasClass,\n    KEYFRAMES, isFunction,\n    IObject, $, splitComma, toArray, isString, IArrayFormat,\n    dot as dotNumber,\n    find,\n    findIndex,\n    getKeys,\n    sortOrders,\n} from \"@daybrush/utils\";\nimport {\n    NameType, AnimateElement, AnimatorState,\n    SceneItemState, SceneItemOptions, EasingType, PlayCondition, DirectionType, SceneItemEvents\n} from \"./types\";\nimport OrderMap from \"order-map\";\nimport styled, { InjectResult, StyledInjector } from \"css-styled\";\n\nfunction getNearTimeIndex(times: number[], time: number) {\n    const length = times.length;\n\n    for (let i = 0; i < length; ++i) {\n        if (times[i] === time) {\n            return [i, i];\n        } else if (times[i] > time) {\n            return [i > 0 ? i - 1 : 0, i];\n        }\n    }\n    return [length - 1, length - 1];\n}\nfunction makeAnimationProperties(properties: object) {\n    const cssArray = [];\n\n    for (const name in properties) {\n        cssArray.push(`${ANIMATION}-${decamelize(name)}:${properties[name]};`);\n    }\n    return cssArray.join(\"\");\n}\nfunction addTime(times: number[], time: number) {\n    const length = times.length;\n    for (let i = 0; i < length; ++i) {\n        if (time < times[i]) {\n            times.splice(i, 0, time);\n            return;\n        }\n    }\n    times[length] = time;\n}\nfunction addEntry(entries: number[][], time: number, keytime: number) {\n    const prevEntry = entries[entries.length - 1];\n\n    (!prevEntry || prevEntry[0] !== time || prevEntry[1] !== keytime) &&\n        entries.push([toFixed(time), toFixed(keytime)]);\n}\nexport function getEntries(times: number[], states: AnimatorState[]) {\n    let entries = times.map(time => ([time, time]));\n    let nextEntries = [];\n\n    states.forEach(state => {\n        const iterationCount = state[ITERATION_COUNT] as number;\n        const delay = state[DELAY];\n        const playSpeed = state[PLAY_SPEED];\n        const direction = state[DIRECTION];\n        const intCount = Math.ceil(iterationCount);\n        const currentDuration = entries[entries.length - 1][0];\n        const length = entries.length;\n        const lastTime = currentDuration * iterationCount;\n\n        for (let i = 0; i < intCount; ++i) {\n            const isReverse =\n                direction === REVERSE ||\n                direction === ALTERNATE && i % 2 ||\n                direction === ALTERNATE_REVERSE && !(i % 2);\n\n            for (let j = 0; j < length; ++j) {\n                const entry = entries[isReverse ? length - j - 1 : j];\n                const time = entry[1];\n                const currentTime = currentDuration * i + (isReverse ? currentDuration - entry[0] : entry[0]);\n                const prevEntry = entries[isReverse ? length - j : j - 1];\n\n                if (currentTime > lastTime) {\n                    if (j !== 0) {\n                        const prevTime = currentDuration * i +\n                            (isReverse ? currentDuration - prevEntry[0] : prevEntry[0]);\n                        const divideTime = dotNumber(prevEntry[1], time, lastTime - prevTime, currentTime - lastTime);\n\n                        addEntry(nextEntries, (delay + currentDuration * iterationCount) / playSpeed, divideTime);\n                    }\n                    break;\n                } else if (\n                    currentTime === lastTime\n                    && nextEntries.length\n                    && nextEntries[nextEntries.length - 1][0] === lastTime + delay\n                ) {\n                    break;\n                }\n                addEntry(nextEntries, (delay + currentTime) / playSpeed, time);\n            }\n        }\n        // delay time\n        delay && nextEntries.unshift([0, nextEntries[0][1]]);\n\n        entries = nextEntries;\n        nextEntries = [];\n    });\n\n    return entries;\n}\n/**\n* manage Frame Keyframes and play keyframes.\n* @extends Animator\n* @example\nconst item = new SceneItem({\n\t0: {\n\t\tdisplay: \"none\",\n\t},\n\t1: {\n\t\tdisplay: \"block\",\n\t\topacity: 0,\n\t},\n\t2: {\n\t\topacity: 1,\n\t}\n});\n*/\nclass SceneItem extends Animator<SceneItemOptions, SceneItemState, SceneItemEvents> {\n    public times: number[] = [];\n    public items: IObject<Frame> = {};\n    public nameMap = new OrderMap(NAME_SEPARATOR);\n    public elements: AnimateElement[] = [];\n    public styled: StyledInjector;\n    public styledInjector: InjectResult;\n    public temp: Frame;\n    private needUpdate: boolean = true;\n    private target: any;\n    private targetFunc: (frame: Frame) => void;\n\n    /**\n      * @param - properties\n      * @param - options\n      * @example\n      const item = new SceneItem({\n          0: {\n              display: \"none\",\n          },\n          1: {\n              display: \"block\",\n              opacity: 0,\n          },\n          2: {\n              opacity: 1,\n          }\n      });\n       */\n    constructor(properties?: any, options?: Partial<SceneItemOptions>) {\n        super();\n        this.load(properties, options);\n    }\n    public getDuration() {\n        const times = this.times;\n        const length = times.length;\n\n        return (length === 0 ? 0 : times[length - 1]) || this.state[DURATION];\n    }\n    /**\n      * get size of list\n      * @return {Number} length of list\n      */\n    public size() {\n        return this.times.length;\n    }\n    public setDuration(duration: number) {\n        if (!duration) {\n            return this;\n        }\n        const originalDuration = this.getDuration();\n\n        if (originalDuration > 0) {\n            const ratio = duration / originalDuration;\n            const { times, items } = this;\n            const obj: IObject<Frame> = {};\n\n            this.times = times.map(time => {\n                const time2 = toFixed(time * ratio);\n\n                obj[time2] = items[time];\n\n                return time2;\n            });\n            this.items = obj;\n        } else {\n            this.newFrame(duration);\n        }\n        return this;\n    }\n    public setId(id?: number | string) {\n        const state = this.state;\n        const elements = this.elements;\n        const length = elements.length;\n\n        state.id = id || makeId(!!length);\n\n        if (length && !state[SELECTOR]) {\n            const sceneId = toId(this.getId());\n\n            state[SELECTOR] = `[${DATA_SCENE_ID}=\"${sceneId}\"]`;\n            elements.forEach(element => {\n                element.setAttribute(DATA_SCENE_ID, sceneId);\n            });\n        }\n        return this;\n    }\n\n    /**\n      * Set properties to the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} [properties] - property names or values\n      * @return {SceneItem} An instance itself\n      * @example\n  item.set(0, \"a\", \"b\") // item.getFrame(0).set(\"a\", \"b\")\n  console.log(item.get(0, \"a\")); // \"b\"\n      */\n    public set(time: any, ...args: any[]) {\n        if (time instanceof SceneItem) {\n            return this.set(0, time);\n        } else if (isArray(time)) {\n            const length = time.length;\n\n            for (let i = 0; i < length; ++i) {\n                const t = length === 1 ? 0 : this.getUnitTime(`${i / (length - 1) * 100}%`);\n\n                this.set(t, time[i]);\n            }\n        } else if (isObject(time)) {\n            for (const t in time) {\n                const value = time[t];\n\n                splitComma(t).forEach(eachTime => {\n                    const realTime = this.getUnitTime(eachTime);\n\n                    if (isNaN(realTime)) {\n                        getNames(value, [eachTime]).forEach(names => {\n                            const innerValue = getValueByNames(names.slice(1), value);\n                            const arr = isArray(innerValue) ?\n                                innerValue : [getValueByNames(names, this.target), innerValue];\n                            const length = arr.length;\n\n                            for (let i = 0; i < length; ++i) {\n                                this.newFrame(`${i / (length - 1) * 100}%`).set(...names, arr[i]);\n                            }\n                        });\n                    } else {\n                        this.set(realTime, value);\n                    }\n                });\n            }\n        } else if (!isUndefined(time)) {\n            const value = args[0];\n\n            splitComma(time + \"\").forEach(eachTime => {\n                const realTime = this.getUnitTime(eachTime);\n\n                if (value instanceof SceneItem) {\n                    const delay = value.getDelay();\n                    const frames = value.toObject(!this.hasFrame(realTime + delay));\n                    const duration = value.getDuration();\n                    const direction = value.getDirection();\n                    const isReverse = direction.indexOf(\"reverse\") > -1;\n\n                    for (const frameTime in frames) {\n                        const nextTime = isReverse ? duration - parseFloat(frameTime) : parseFloat(frameTime);\n                        this.set(realTime + nextTime, frames[frameTime]);\n                    }\n                } else if (args.length === 1 && isArray(value)) {\n                    value.forEach((item: any) => {\n                        this.set(realTime, item);\n                    });\n                } else {\n                    const frame = this.newFrame(realTime);\n\n                    frame.set(...args);\n                }\n            });\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * Get properties of the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} args property's name or properties\n      * @return {Number|String|PropertyObejct} property value\n      * @example\n  item.get(0, \"a\"); // item.getFrame(0).get(\"a\");\n  item.get(0, \"transform\", \"translate\"); // item.getFrame(0).get(\"transform\", \"translate\");\n      */\n    public get(time: string | number, ...args: NameType[]) {\n        const frame = this.getFrame(time);\n\n        return frame && frame.get(...args);\n    }\n    /**\n      * get properties orders\n      * @param - property names\n      * @example\n      item.getOrders([\"display\"]) // => []\n      item.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      */\n    public getOrders(names: NameType[]): NameType[] | undefined {\n        this.needUpdate && this.update();\n\n        return this.nameMap.get(names);\n    }\n    /**\n      * set properties orders\n      * @param - property names\n      * @param - orders\n      * @example\n      item.getOrders([\"transform\"]) // => [\"translate\", \"scale\"]\n      item.setOrders([\"transform\"], [\"scale\", \"tralsate\"])\n      */\n    public setOrders(names: NameType[], orders: NameType[]): NameType[] {\n        this.needUpdate && this.update();\n\n        const result = this.nameMap.set(names, orders);\n\n        this.updateFrameOrders();\n\n        return result;\n    }\n    /**\n      * get properties order object\n      * @example\n      console.log(item.getOrderObject());\n      */\n     public getOrderObject() {\n        return this.nameMap.getObject();\n    }\n    /**\n      * set properties orders object\n      * @param - properties orders object\n      * @example\n      item.setOrderObject({\n          \"\": [\"transform\"],\n          \"transform\": [\"scale\", \"tralsate\"],\n      });\n      */\n    public setOrderObject(obj: IObject<NameType[]>) {\n        this.nameMap.setObject(obj);\n\n        this.updateFrameOrders();\n    }\n    public remove(time: string | number, ...args: any[]): this;\n    /**\n      * remove properties to the sceneItem at that time\n      * @param {Number} time - time\n      * @param {...String|Object} [properties] - property names or values\n      * @return {SceneItem} An instance itself\n      * @example\n  item.remove(0, \"a\");\n      */\n    public remove(time: string | number, ...args: NameType[]) {\n        if (args.length) {\n            const frame = this.getFrame(time);\n\n            frame && frame.remove(...args);\n        } else {\n            this.removeFrame(time);\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * Append the item or object at the last time.\n      * @param - the scene item or item object\n      * @return An instance itself\n      * @example\n  item.append(new SceneItem({\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  }));\n  item.append({\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  });\n  item.set(item.getDuration(), {\n      0: {\n          opacity: 0,\n      },\n      1: {\n          opacity: 1,\n      }\n  });\n      */\n    public append(item: SceneItem | IObject<any>) {\n        if (item instanceof SceneItem) {\n            this.set(this.getDuration(), item);\n        } else {\n            this.append(new SceneItem(item));\n        }\n        return this;\n    }\n    /**\n      * Push the front frames for the time and prepend the scene item or item object.\n      * @param - the scene item or item object\n      * @return An instance itself\n      */\n    public prepend(item: SceneItem | IObject<any>) {\n        if (item instanceof SceneItem) {\n            const unshiftTime = item.getDuration() + item.getDelay();\n            const firstFrame = this.getFrame(0);\n            // remove first frame\n            this.removeFrame(0);\n            this.unshift(unshiftTime);\n            this.set(0, item);\n            this.set(unshiftTime + THRESHOLD, firstFrame);\n        } else {\n            this.prepend(new SceneItem(item));\n        }\n        return this;\n    }\n    /**\n     * Push out the amount of time.\n     * @param - time to push\n     * @example\n   item.get(0); // frame 0\n   item.unshift(3);\n   item.get(3) // frame 0\n     */\n    public unshift(time: number) {\n        const { times, items } = this;\n        const obj: IObject<Frame> = {};\n\n        this.times = times.map(t => {\n            const time2 = toFixed(time + t);\n\n            obj[time2] = items[t];\n            return time2;\n        });\n        this.items = obj;\n        return this;\n    }\n    /**\n     * Get the frames in the item in object form.\n     * @return {}\n     * @example\n item.toObject();\n // {0: {display: \"none\"}, 1: {display: \"block\"}}\n     */\n    public toObject(isStartZero = true): IObject<Frame> {\n        const obj: IObject<Frame> = {};\n        const delay = this.getDelay();\n\n        this.forEach((frame: Frame, time: number) => {\n            obj[(!time && !isStartZero ? THRESHOLD : 0) + delay + time] = frame.clone();\n        });\n        return obj;\n    }\n    /**\n     * Specifies an element to synchronize items' keyframes.\n     * @param {string} selectors - Selectors to find elements in items.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setSelector(\"#id.class\");\n     */\n    public setSelector(target: string | boolean | ((id: number | string) => string)) {\n        if (isFunction(target)) {\n            this.setElement(target(this.getId()));\n        } else {\n            this.setElement(target);\n        }\n        return this;\n    }\n    /**\n     * Get the elements connected to SceneItem.\n     */\n    public getElements(): AnimateElement[] {\n        return this.elements;\n    }\n    /**\n     * Specifies an element to synchronize item's keyframes.\n     * @param - elements to synchronize item's keyframes.\n     * @param - Make sure that you have peusdo.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n     */\n    public setElements(target: boolean | string | AnimateElement | IArrayFormat<AnimateElement>): this {\n        return this.setElement(target);\n    }\n    /**\n     * Specifies an element to synchronize item's keyframes.\n     * @param - elements to synchronize item's keyframes.\n     * @param - Make sure that you have peusdo.\n     * @return {SceneItem} An instance itself\n     * @example\nitem.setElement(document.querySelector(\"#id.class\"));\nitem.setElement(document.querySelectorAll(\".class\"));\n     */\n    public setElement(target: boolean | string | AnimateElement | IArrayFormat<AnimateElement>) {\n        const state = this.state;\n        let elements: AnimateElement[] = [];\n\n        if (!target) {\n            return this;\n        } else if (target === true || isString(target)) {\n            const selector = target === true ? `${state.id}` : target;\n            const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(selector);\n\n            elements = toArray($(matches ? matches[1] : selector, true));\n            state[SELECTOR] = selector;\n        } else {\n            elements = (target instanceof Element) ? [target] : toArray(target);\n        }\n        if (!elements.length) {\n            return this;\n        }\n        this.elements = elements;\n        this.setId(this.getId());\n        this.target = elements[0].style;\n        this.targetFunc = (frame: Frame) => {\n            const attributes = frame.get(\"attribute\");\n\n            if (attributes) {\n                for (const name in attributes) {\n                    elements.forEach(el => {\n                        el.setAttribute(name, attributes[name]);\n                    });\n                }\n            }\n            if (frame.has(\"html\")) {\n                const html = frame.get(\"html\");\n\n                elements.forEach(el => {\n                    el.innerHTML = html;\n                });\n            }\n            const cssText = frame.toCSS();\n\n            if (state.cssText !== cssText) {\n                state.cssText = cssText;\n\n                elements.forEach(el => {\n                    el.style.cssText += cssText;\n                });\n                return frame;\n            }\n        };\n        return this;\n    }\n    public setTarget(target: any): this {\n        this.target = target;\n        this.targetFunc = (frame: Frame) => {\n            const obj = frame.get();\n\n            for (const name in obj) {\n                target[name] = obj[name];\n            }\n        };\n        return this;\n    }\n    /**\n      * add css styles of items's element to the frame at that time.\n      * @param - Time to synchronize and set css\n      * @param - elements to synchronize item's keyframes.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setElement(document.querySelector(\"#id.class\"));\n  item.setCSS(0, [\"opacity\"]);\n  item.setCSS(0, [\"opacity\", \"width\", \"height\"]);\n      */\n    public setCSS(time: number, properties: string[] = []) {\n        this.set(time, fromCSS(this.elements, properties));\n        return this;\n    }\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean, parentEasing?: EasingType) {\n        super.setTime(time, isTick, isParent);\n\n        const iterationTime = this.getIterationTime();\n        const easing = this.getEasing() || parentEasing;\n        const frame = this.getNowFrame(iterationTime, easing);\n        const currentTime = this.getTime();\n\n        this.temp = frame;\n        /**\n         * This event is fired when timeupdate and animate.\n         * @event SceneItem#animate\n         * @param {Number} param.currentTime The total time that the animator is running.\n         * @param {Number} param.time The iteration time during duration that the animator is running.\n         * @param {Frame} param.frame frame of that time.\n         */\n        this.trigger(\"animate\", {\n            frame,\n            currentTime,\n            time: iterationTime,\n        });\n        this.targetFunc && this.targetFunc(frame);\n        return this;\n    }\n    /**\n      * update property names used in frames.\n      * @return {SceneItem} An instance itself\n      * @example\n  item.update();\n      */\n    public update() {\n        const prevNameMap = this.nameMap;\n        const names = {};\n        this.forEach(frame => {\n            updateFrame(names, frame.properties);\n        });\n\n        const nameMap = new OrderMap(NAME_SEPARATOR);\n\n        function pushKeys(map: IObject<any>, stack: NameType[]) {\n            const keys = getKeys(map);\n\n            sortOrders(keys, prevNameMap.get(stack));\n\n            nameMap.set(stack, keys);\n            keys.forEach(key => {\n                const nextMap = map[key];\n                if (isObject(nextMap)) {\n                    pushKeys(nextMap, [...stack, key]);\n                }\n            });\n        }\n        pushKeys(names, []);\n\n        this.nameMap = nameMap;\n\n        this.forEach(frame => {\n            frame.setOrderObject(nameMap.orderMap);\n        });\n        this.needUpdate = false;\n        return this;\n    }\n    /**\n      * Create and add a frame to the sceneItem at that time\n      * @param {Number} time - frame's time\n      * @return {Frame} Created frame.\n      * @example\n  item.newFrame(time);\n      */\n    public newFrame(time: string | number) {\n        let frame = this.getFrame(time);\n\n        if (frame) {\n            return frame;\n        }\n        frame = new Frame();\n\n        this.setFrame(time, frame);\n        return frame;\n    }\n    /**\n      * Add a frame to the sceneItem at that time\n      * @param {Number} time - frame's time\n      * @return {SceneItem} An instance itself\n      * @example\n  item.setFrame(time, frame);\n      */\n    public setFrame(time: string | number, frame: Frame) {\n        const realTime = this.getUnitTime(time);\n\n        this.items[realTime] = frame;\n        addTime(this.times, realTime);\n        this.needUpdate = true;\n        return this;\n    }\n    public getFrame(time: number | string, ...names: any[]): Frame;\n    /**\n      * get sceneItem's frame at that time\n      * @param {Number} time - frame's time\n      * @return {Frame} sceneItem's frame at that time\n      * @example\n  const frame = item.getFrame(time);\n      */\n    public getFrame(time: number | string) {\n        return this.items[this.getUnitTime(time)];\n    }\n    public removeFrame(time: number | string, ...names: any[]): this;\n    /**\n      * remove sceneItem's frame at that time\n      * @param - frame's time\n      * @return {SceneItem} An instance itself\n      * @example\n  item.removeFrame(time);\n      */\n    public removeFrame(time: number | string) {\n        const realTime = this.getUnitTime(time);\n        const items = this.items;\n        const index = this.times.indexOf(realTime);\n\n        delete items[realTime];\n\n        // remove time\n        if (index > -1) {\n            this.times.splice(index, 1);\n        }\n        this.needUpdate = true;\n        return this;\n    }\n    /**\n      * check if the item has a frame at that time\n      * @param {Number} time - frame's time\n      * @return {Boolean} true: the item has a frame // false: not\n      * @example\n  if (item.hasFrame(10)) {\n      // has\n  } else {\n      // not\n  }\n      */\n    public hasFrame(time: number | string) {\n        return this.getUnitTime(time) in this.items;\n    }\n    /**\n      * Check if keyframes has propery's name\n      * @param - property's time\n      * @return {boolean} true: if has property, false: not\n      * @example\n    item.hasName([\"transform\", \"translate\"]); // true or not\n      */\n    public hasName(args: string[]) {\n        this.needUpdate && this.update();\n        return !!this.nameMap.get(args);\n    }\n    /**\n      * merge frame of the previous time at the next time.\n    * @param - The time of the frame to merge\n    * @param - The target frame\n      * @return {SceneItem} An instance itself\n      * @example\n  // getFrame(1) contains getFrame(0)\n  item.merge(0, 1);\n      */\n    public mergeFrame(time: number | string, frame: Frame) {\n        if (frame) {\n            const toFrame = this.newFrame(time);\n\n            toFrame.merge(frame);\n        }\n        return this;\n    }\n    /**\n      * Get frame of the current time\n      * @param {Number} time - the current time\n      * @param {function} easing - the speed curve of an animation\n      * @return {Frame} frame of the current time\n      * @example\n  let item = new SceneItem({\n      0: {\n          display: \"none\",\n      },\n      1: {\n          display: \"block\",\n          opacity: 0,\n      },\n      2: {\n          opacity: 1,\n      }\n  });\n  // opacity: 0.7; display:\"block\";\n  const frame = item.getNowFrame(1.7);\n      */\n    public getNowFrame(time: number, easing?: EasingType, isAccurate?: boolean) {\n        this.needUpdate && this.update();\n        const frame = new Frame();\n        const [left, right] = getNearTimeIndex(this.times, time);\n        let realEasing = this.getEasing() || easing;\n        let nameMap = this.nameMap;\n\n        if (this.hasName([TIMING_FUNCTION])) {\n            const nowEasing = this.getNowValue(time, [TIMING_FUNCTION], left, right, false, 0, true);\n\n            isFunction(nowEasing) && (realEasing = nowEasing);\n        }\n        if (isAccurate) {\n            const prevFrame = this.getFrame(time);\n            const prevOrderMap = prevFrame.orderMap.filter([], orders => {\n                return prevFrame.has(...orders);\n            });\n\n            for (const name in ROLES) {\n                const orders = nameMap.get([name]);\n                if (prevOrderMap.get([name]) && orders) {\n                    prevOrderMap.set([name], orders);\n                }\n            }\n            nameMap = prevOrderMap;\n        }\n        const names = nameMap.gets([]);\n\n        frame.setOrderObject(nameMap.orderMap);\n        names.forEach(properties => {\n            const value = this.getNowValue(time, properties, left, right, isAccurate, realEasing, isFixed(properties));\n\n            if (isUndefined(value)) {\n                return;\n            }\n            frame.set(properties, value);\n        });\n        return frame;\n    }\n    public load(properties: any = {}, options = properties.options) {\n        options && this.setOptions(options);\n\n        if (isArray(properties)) {\n            this.set(properties);\n        } else if (properties.keyframes) {\n            this.set(properties.keyframes);\n        } else {\n            for (const time in properties) {\n                if (time !== \"options\") {\n                    this.set({\n                        [time]: properties[time],\n                    });\n                }\n            }\n        }\n        if (options && options[DURATION]) {\n            this.setDuration(options[DURATION]);\n        }\n        return this;\n    }\n    /**\n       * clone SceneItem.\n       * @return {SceneItem} An instance of clone\n       * @example\n       * item.clone();\n       */\n    public clone() {\n        const item = new SceneItem();\n\n        item.setOptions(this.state);\n        item.setOrderObject(this.nameMap.orderMap);\n\n        this.forEach((frame: Frame, time: number) => {\n            item.setFrame(time, frame.clone());\n        });\n        return item;\n    }\n    /**\n       * executes a provided function once for each scene item.\n       * @param - Function to execute for each element, taking three arguments\n       * @return {Keyframes} An instance itself\n       */\n    public forEach(callback: (item: Frame, time: number, items: IObject<Frame>) => void) {\n        const times = this.times;\n        const items = this.items;\n\n        times.forEach(time => {\n            callback(items[time], time, items);\n        });\n        return this;\n    }\n    public setOptions(options: Partial<SceneItemOptions> = {}) {\n        super.setOptions(options);\n        const { id, selector, elements, element, target } = options;\n\n        id && this.setId(id);\n        if (target) {\n            this.setTarget(target);\n        } else if (selector) {\n            this.setSelector(selector);\n        } else if (elements || element) {\n            this.setElement(elements || element);\n        }\n        return this;\n    }\n    public toCSS(\n        playCondition: PlayCondition = { className: START_ANIMATION },\n        parentDuration = this.getDuration(), states: AnimatorState[] = []) {\n        const itemState = this.state;\n        const selector = itemState[SELECTOR];\n\n        if (!selector) {\n            return \"\";\n        }\n        const originalDuration = this.getDuration();\n        itemState[DURATION] = originalDuration;\n        states.push(itemState);\n\n        const reversedStates = toArray(states).reverse();\n        const id = toId(getRealId(this));\n        const superParent = states[0];\n        const infiniteIndex = findIndex(reversedStates, state => {\n            return state[ITERATION_COUNT] === INFINITE || !isFinite(state[DURATION]);\n        }, states.length - 1);\n        const finiteStates = reversedStates.slice(0, infiniteIndex);\n        const duration = parentDuration || finiteStates.reduce((prev, cur) => {\n            return (cur[DELAY] + prev * (cur[ITERATION_COUNT] as number)) / cur[PLAY_SPEED];\n        }, originalDuration);\n        const delay = reversedStates.slice(infiniteIndex).reduce((prev, cur) => {\n            return (prev + cur[DELAY]) / cur[PLAY_SPEED];\n        }, 0);\n        const easingName = find(reversedStates, state => (state[EASING] && state[EASING_NAME]), itemState)[EASING_NAME];\n        const iterationCount = reversedStates[infiniteIndex][ITERATION_COUNT];\n        const fillMode = superParent[FILL_MODE];\n        const direction = reversedStates[infiniteIndex][DIRECTION];\n        const cssText = makeAnimationProperties({\n            fillMode,\n            direction,\n            iterationCount,\n            delay: `${delay}s`,\n            name: `${PREFIX}KEYFRAMES_${id}`,\n            duration: `${duration / superParent[PLAY_SPEED]}s`,\n            timingFunction: easingName,\n        });\n        const selectors = splitComma(selector).map(sel => {\n            const matches = /([\\s\\S]+)(:+[a-zA-Z]+)$/g.exec(sel);\n\n            if (matches) {\n                return [matches[1], matches[2]];\n            } else {\n                return [sel, \"\"];\n            }\n        });\n        const className = playCondition.className;\n        const selectorCallback = playCondition.selector;\n        const preselector = isFunction(selectorCallback) ? selectorCallback(this, selector) : selectorCallback;\n\n        return `\n    ${preselector || selectors.map(([sel, peusdo]) => `${sel}.${className}${peusdo}`)} {${cssText}}\n    ${selectors.map(([sel, peusdo]) => `${sel}.${PAUSE_ANIMATION}${peusdo}`)} {${ANIMATION}-play-state: paused;}\n    @${KEYFRAMES} ${PREFIX}KEYFRAMES_${id}{${this._toKeyframes(duration, finiteStates, direction)}}`;\n    }\n    /**\n     * Export the CSS of the items to the style.\n     * @param - Add a selector or className to play.\n     * @return {SceneItem} An instance itself\n     */\n    public exportCSS(\n        playCondition?: PlayCondition,\n        duration?: number, options?: AnimatorState[]) {\n        if (!this.elements.length) {\n            return \"\";\n        }\n        const css = this.toCSS(playCondition, duration, options);\n        const isParent = options && !isUndefined(options[ITERATION_COUNT]);\n\n        if (!isParent) {\n            if (this.styledInjector) {\n                this.styledInjector.destroy();\n                this.styledInjector = null;\n            }\n            this.styled = styled(css);\n            this.styledInjector = this.styled.inject(this.getAnimationElement(), { original: true });\n        }\n        return this;\n    }\n    public pause() {\n        super.pause();\n        isPausedCSS(this) && this.pauseCSS();\n        return this;\n    }\n    public pauseCSS() {\n        this.elements.forEach(element => {\n            addClass(element, PAUSE_ANIMATION);\n        });\n        return this;\n    }\n    public endCSS() {\n        this.elements.forEach(element => {\n            removeClass(element, PAUSE_ANIMATION);\n            removeClass(element, START_ANIMATION);\n        });\n        setPlayCSS(this, false);\n        return this;\n    }\n    public end() {\n        isEndedCSS(this) && this.endCSS();\n        super.end();\n        return this;\n    }\n    /**\n      * Play using the css animation and keyframes.\n      * @param - Check if you want to export css.\n      * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n      * @param - The shorthand properties for six of the animation properties.\n      * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n      * @example\n  item.playCSS();\n  item.playCSS(false, \"startAnimation\", {\n      direction: \"reverse\",\n      fillMode: \"forwards\",\n  });\n      */\n    public playCSS(isExportCSS = true, playClassName?: string, properties: object = {}) {\n        playCSS(this, isExportCSS, playClassName, properties);\n        return this;\n    }\n    public getAnimationElement(): AnimateElement {\n        return this.elements[0];\n    }\n    public addPlayClass(isPaused: boolean, playClassName?: string, properties: object = {}) {\n        const elements = this.elements;\n        const length = elements.length;\n        const cssText = makeAnimationProperties(properties);\n\n        if (!length) {\n            return;\n        }\n        if (isPaused) {\n            elements.forEach(element => {\n                removeClass(element, PAUSE_ANIMATION);\n            });\n        } else {\n            elements.forEach(element => {\n                element.style.cssText += cssText;\n\n                if (hasClass(element, START_ANIMATION)) {\n                    removeClass(element, START_ANIMATION);\n                }\n            });\n            elements.forEach(element => {\n                element.clientWidth;\n            });\n            elements.forEach(element => {\n                addClass(element, START_ANIMATION);\n            });\n        }\n        return elements[0];\n    }\n    /**\n      * Clear All Frames\n      * @return {SceneItem} An instance itself\n      */\n    public clear() {\n        this.times = [];\n        this.items = {};\n        this.nameMap = new OrderMap(NAME_SEPARATOR);\n\n        if (this.styledInjector) {\n            this.styledInjector.destroy();\n        }\n        this.styled = null;\n        this.styledInjector = null;\n        this.temp = null;\n        this.needUpdate = true;\n        return this;\n    }\n    public getNowValue(\n        time: number,\n        properties: NameType[],\n        left?: number,\n        right?: number,\n        isAccurate?: boolean,\n        easing?: EasingType,\n        usePrevValue?: boolean,\n    ) {\n        const times = this.times;\n        const length = times.length;\n\n        let prevTime: number;\n        let nextTime: number;\n        let prevFrame: Frame;\n        let nextFrame: Frame;\n        const isUndefinedLeft = isUndefined(left);\n        const isUndefinedRight = isUndefined(right);\n        if (isUndefinedLeft || isUndefinedRight) {\n            const indicies = getNearTimeIndex(times, time);\n            isUndefinedLeft && (left = indicies[0]);\n            isUndefinedRight && (right = indicies[1]);\n        }\n\n        for (let i = left; i >= 0; --i) {\n            const frame = this.getFrame(times[i]);\n\n            if (frame.has(...properties)) {\n                prevTime = times[i];\n                prevFrame = frame;\n                break;\n            }\n        }\n        const prevValue = prevFrame && prevFrame.raw(...properties);\n\n        if (isAccurate && !isRole([properties[0]])) {\n            return prevTime === time ? prevValue : undefined;\n        }\n        if (usePrevValue) {\n            return prevValue;\n        }\n        for (let i = right; i < length; ++i) {\n            const frame = this.getFrame(times[i]);\n\n            if (frame.has(...properties)) {\n                nextTime = times[i];\n                nextFrame = frame;\n                break;\n            }\n        }\n        const nextValue = nextFrame && nextFrame.raw(...properties);\n\n        if (!prevFrame || isUndefined(prevValue)) {\n            return nextValue;\n        }\n        if (!nextFrame || isUndefined(nextValue) || prevValue === nextValue) {\n            return prevValue;\n        }\n        return dotValue(time, Math.max(prevTime, 0), nextTime, prevValue, nextValue, easing);\n    }\n    private _toKeyframes(duration: number, states: AnimatorState[], direction: DirectionType) {\n        const frames: IObject<string> = {};\n        const times = this.times.slice();\n\n        if (!times.length) {\n            return \"\";\n        }\n        const originalDuration = this.getDuration();\n        (!this.getFrame(0)) && times.unshift(0);\n        (!this.getFrame(originalDuration)) && times.push(originalDuration);\n        const entries = getEntries(times, states);\n        const lastEntry = entries[entries.length - 1];\n\n        // end delay time\n        lastEntry[0] < duration && addEntry(entries, duration, lastEntry[1]);\n        let prevTime = -1;\n\n        return entries.map(([time, keytime]) => {\n            if (!frames[keytime]) {\n                frames[keytime] =\n                    (!this.hasFrame(keytime) || keytime === 0 || keytime === originalDuration ?\n                        this.getNowFrame(keytime) : this.getNowFrame(keytime, 0, true)).toCSS();\n            }\n\n            let frameTime = time / duration * 100;\n\n            if (frameTime - prevTime < THRESHOLD) {\n                frameTime += THRESHOLD;\n            }\n            prevTime = frameTime;\n            return `${Math.min(frameTime, 100)}%{\n                ${time === 0 && !isDirectionReverse(0, 1, direction) ? \"\" : frames[keytime]}\n            }`;\n        }).join(\"\");\n    }\n    private updateFrameOrders() {\n        const nameMap = this.nameMap.orderMap;\n\n        this.forEach(frame => {\n            frame.setOrderObject(nameMap);\n        });\n    }\n}\n\nexport default SceneItem;\n","import Animator from \"./Animator\";\nimport SceneItem from \"./SceneItem\";\nimport { SELECTOR, DURATION, DELAY, RUNNING, NAME_SEPARATOR } from \"./consts\";\nimport { playCSS, getRealId, isPausedCSS, isEndedCSS, setPlayCSS } from \"./utils\";\nimport { isFunction, IS_WINDOW, IObject, $, IArrayFormat } from \"@daybrush/utils\";\nimport {\n    AnimateElement, SceneState, SceneOptions, EasingType,\n    AnimatorState, SceneItemOptions, PlayCondition, NameType, SceneEvents\n} from \"./types\";\nimport Frame from \"./Frame\";\nimport OrderMap from \"order-map\";\nimport styled, { InjectResult, StyledInjector } from \"css-styled\";\n/**\n * manage sceneItems and play Scene.\n * @extends Animator\n * @sort 1\n */\nclass Scene extends Animator<SceneOptions, SceneState, SceneEvents> {\n    /**\n    * version info\n    * @type {string}\n    * @example\n    * Scene.VERSION // #__VERSION__#\n    */\n    public static VERSION: string = \"#__VERSION__#\";\n    public items: IObject<Scene | SceneItem> = {};\n    public orderMap = new OrderMap(NAME_SEPARATOR);\n    public styled: StyledInjector;\n    public styledInjector: InjectResult;\n    public temp: IObject<Frame>;\n    /**\n    * @param - properties\n    * @param - options\n    * @example\n    const scene = new Scene({\n      item1: {\n        0: {\n          display: \"none\",\n        },\n        1: {\n          display: \"block\",\n          opacity: 0,\n        },\n        2: {\n          opacity: 1,\n        },\n      },\n      item2: {\n        2: {\n          opacity: 1,\n        },\n      }\n    });\n      */\n    constructor(properties?: { options?: Partial<SceneOptions> } & IObject<any>, options?: Partial<SceneOptions>) {\n        super();\n        this.load(properties, options);\n    }\n    public getDuration() {\n        let time = 0;\n\n        this.forEach(item => {\n            time = Math.max(time, item.getTotalDuration() / item.getPlaySpeed());\n        });\n        return time || this.state[DURATION];\n    }\n    public setDuration(duration: number) {\n        const items = this.items;\n        const sceneDuration = this.getDuration();\n\n        if (duration === 0 || !isFinite(sceneDuration)) {\n            return this;\n        }\n        if (sceneDuration === 0) {\n            this.forEach(item => {\n                item.setDuration(duration);\n            });\n        } else {\n            const ratio = duration / sceneDuration;\n\n            this.forEach(item => {\n                item.setDelay(item.getDelay() * ratio);\n                item.setDuration(item.getDuration() * ratio);\n            });\n        }\n        super.setDuration(duration);\n        return this;\n    }\n    public getItem<T extends (Scene | SceneItem) = Scene | SceneItem>(name: number | string): T;\n    /**\n    * get item in scene by name\n    * @param - The item's name\n    * @return {Scene | SceneItem} item\n    * @example\n    const item = scene.getItem(\"item1\")\n    */\n    public getItem(name: number | string) {\n        return this.items[name];\n    }\n    /**\n    * create item in scene\n    * @param {} name - name of item to create\n    * @param {} options - The option object of SceneItem\n    * @return {} Newly created item\n    * @example\n    const item = scene.newItem(\"item1\")\n    */\n    public newItem(name: number | string, options: Partial<SceneItemOptions> = {}): Scene | SceneItem {\n        if (this.items[name]) {\n            return this.items[name];\n        }\n        const item = new SceneItem();\n\n        this.setItem(name, item);\n        item.setOptions(options);\n\n        return item;\n    }\n    /**\n    * remove item in scene\n    * @param - name of item to remove\n    * @return  An instance itself\n    * @example\n    const item = scene.newItem(\"item1\")\n\n    scene.removeItem(\"item1\");\n    */\n    public removeItem(name: number | string): this {\n        delete this.items[name];\n\n        this.orderMap.remove([name]);\n        return this;\n    }\n    /**\n    * add a sceneItem to the scene\n    * @param - name of item to create\n    * @param - sceneItem\n    * @example\n    const item = scene.newItem(\"item1\")\n    */\n    public setItem(name: number | string, item: Scene | SceneItem) {\n        item.setId(name);\n        this.items[name] = item;\n\n        this.orderMap.add([name]);\n        return this;\n    }\n    public setTime(time: number | string, isTick?: boolean, isParent?: boolean, parentEasing?: EasingType) {\n        super.setTime(time, isTick, isParent);\n\n        const iterationTime = this.getIterationTime();\n        const easing = this.getEasing() || parentEasing;\n        const frames: IObject<any> = {};\n\n        this.forEach(item => {\n            item.setTime(iterationTime * item.getPlaySpeed() - item.getDelay(), isTick, true, easing);\n\n            frames[item.getId()] = item.temp;\n        });\n        this.temp = frames;\n\n        /**\n         * This event is fired when timeupdate and animate.\n         * @event Scene#animate\n         * @param {object} param The object of data to be sent to an event.\n         * @param {number} param.currentTime The total time that the animator is running.\n         * @param {number} param.time The iteration time during duration that the animator is running.\n         * @param {object} param.frames frames of that time.\n         * @example\nconst scene = new Scene({\n    a: {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        }\n    },\n    b: {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        }\n    }\n}).on(\"animate\", e => {\n    console.log(e.frames);\n    // {a: Frame, b: Frame}\n    console.log(e.frames.a.get(\"opacity\"));\n});\n             */\n        this.trigger(\"animate\", {\n            frames,\n            currentTime: this.getTime(),\n            time: iterationTime,\n        });\n\n        return this;\n    }\n    /**\n     * executes a provided function once for each scene item.\n     * @param - Function to execute for each element, taking three arguments\n     * @return {Scene} An instance itself\n     */\n    public forEach(\n        func: (\n            item: Scene | SceneItem,\n            id: string | number,\n            index: number,\n            items: IObject<Scene | SceneItem>,\n        ) => void,\n    ) {\n        const items = this.items;\n        this.getOrders().forEach((id, index) => {\n            func(items[id], id, index, items);\n        });\n        return this;\n    }\n    public toCSS(\n        playCondition?: PlayCondition,\n        duration: number = this.getDuration(), parentStates: AnimatorState[] = []) {\n        const totalDuration = !duration || !isFinite(duration) ? 0 : duration;\n        const styles: string[] = [];\n        const state = this.state;\n\n        state[DURATION] = this.getDuration();\n\n        this.forEach(item => {\n            styles.push(item.toCSS(playCondition, totalDuration, parentStates.concat(state)));\n        });\n        return styles.join(\"\");\n    }\n    /**\n     * Export the CSS of the items to the style.\n     * @param - Add a selector or className to play.\n     * @return {Scene} An instance itself\n     */\n    public exportCSS(\n        playCondition?: PlayCondition, duration?: number, parentStates?: AnimatorState[]) {\n        const css = this.toCSS(playCondition, duration, parentStates);\n\n        if (!parentStates || !parentStates.length) {\n            if (this.styledInjector) {\n                this.styledInjector.destroy();\n                this.styledInjector = null;\n            }\n            this.styled = styled(css);\n            this.styledInjector = this.styled.inject(this.getAnimationElement(), { original: true });\n            // && exportCSS(getRealId(this), css);\n        }\n        return this;\n    }\n    public append(item: SceneItem | Scene) {\n        item.setDelay(item.getDelay() + this.getDuration());\n        this.setItem(getRealId(item), item);\n    }\n    public pauseCSS() {\n        return this.forEach(item => {\n            item.pauseCSS();\n        });\n    }\n    public pause() {\n        super.pause();\n\n        isPausedCSS(this) && this.pauseCSS();\n        this.forEach(item => {\n            item.pause();\n        });\n        return this;\n    }\n    public endCSS() {\n        this.forEach(item => {\n            item.endCSS();\n        });\n        setPlayCSS(this, false);\n    }\n    public end() {\n        isEndedCSS(this) && this.endCSS();\n        super.end();\n        return this;\n    }\n        /**\n      * get item orders\n      * @example\n      scene.getOrders() // => [\"item1\", \"item2\"]\n      */\n     public getOrders(): NameType[] {\n        return this.orderMap.get([]) || [];\n    }\n    /**\n      * set item orders\n      * @param - orders\n      * @example\n      frame.setOrders([\"item2\", \"item1\"]) // => [\"item2\", \"item1\"]\n      */\n    public setOrders(orders: NameType[]): NameType[] {\n        return this.orderMap.set([], orders);\n    }\n    public getAnimationElement() {\n        let animtionElement: AnimateElement;\n\n        this.forEach(item => {\n            const el = item.getAnimationElement();\n\n            !animtionElement && (animtionElement = el);\n        });\n        return animtionElement;\n    }\n    public addPlayClass(isPaused: boolean, playClassName?: string, properties: object = {}) {\n        let animtionElement: AnimateElement;\n\n        this.forEach(item => {\n            const el = item.addPlayClass(isPaused, playClassName, properties);\n\n            !animtionElement && (animtionElement = el);\n        });\n        return animtionElement;\n    }\n    /**\n    * Play using the css animation and keyframes.\n    * @param - Check if you want to export css.\n    * @param [playClassName=\"startAnimation\"] - Add a class name to play.\n    * @param - The shorthand properties for six of the animation properties.\n    * @return {Scene} An instance itself\n    * @see {@link https://www.w3schools.com/cssref/css3_pr_animation.asp}\n    * @example\n    scene.playCSS();\n    scene.playCSS(false, {\n    direction: \"reverse\",\n    fillMode: \"forwards\",\n    });\n    */\n    public playCSS(isExportCSS = true, playClassName?: string, properties: Partial<AnimatorState> = {}) {\n        playCSS(this, isExportCSS, playClassName, properties);\n        return this;\n    }\n    public set(properties: any, ...args: any[]): this;\n    /**\n      * Set properties to the Scene.\n      * @param - properties\n      * @return An instance itself\n      * @example\nscene.set({\n    \".a\": {\n        0: {\n            opacity: 0,\n        },\n        1: {\n            opacity: 1,\n        },\n    },\n});\n// 0\nconsole.log(scene.getItem(\".a\").get(0, \"opacity\"));\n// 1\nconsole.log(scene.getItem(\".a\").get(1, \"opacity\"));\n      */\n    public set(properties: any) {\n        this.load(properties);\n        return this;\n    }\n    /**\n      * Clear All Items\n      * @return {Scene} An instance itself\n      */\n    public clear() {\n        this.finish();\n        this.items = {};\n        this.orderMap = new OrderMap(NAME_SEPARATOR);\n\n        if (this.styledInjector) {\n            this.styledInjector.destroy();\n        }\n        this.styled = null;\n        this.styledInjector = null;\n    }\n    public load(properties: any = {}, options = properties.options) {\n        if (!properties) {\n            return this;\n        }\n        const selector = options && options[SELECTOR] || this.state[SELECTOR];\n        for (const name in properties) {\n            if (name === \"options\") {\n                continue;\n            }\n            const object = properties[name];\n            let item;\n\n            if (object instanceof Scene || object instanceof SceneItem) {\n                this.setItem(name, object);\n                item = object;\n            } else if (isFunction(object) && selector) {\n                const elements =\n                    IS_WINDOW\n                        ? $(`${isFunction(selector) ? selector(name) : name}`, true) as IArrayFormat<AnimateElement>\n                        : ([] as AnimateElement[]);\n                const length = elements.length;\n                const scene = new Scene();\n\n                for (let i = 0; i < length; ++i) {\n                    (scene.newItem(i) as SceneItem).setId().setElement(elements[i]).load(object(i, elements[i]));\n                }\n                this.setItem(name, scene);\n                continue;\n            } else {\n                item = this.newItem(name);\n                item.load(object);\n            }\n            selector && item.setSelector(selector);\n        }\n        this.setOptions(options);\n    }\n    public setOptions(options: Partial<SceneState> = {}): this {\n        super.setOptions(options);\n\n        const selector = options.selector;\n\n        if (selector) {\n            this.state[SELECTOR] = selector;\n        }\n        return this;\n    }\n    public setSelector(target?: string | boolean | ((id: number | string) => string)) {\n        const state = this.state;\n        const selector = target || state[SELECTOR];\n\n        state[SELECTOR] = selector;\n        const isItFunction = isFunction(target);\n        if (selector) {\n            this.forEach((item, name) => {\n                item.setSelector(isItFunction ? (target as (id: number | string) => string)(name) : selector);\n            });\n        }\n        return this;\n    }\n    public start(delay: number = this.state[DELAY]): boolean {\n        const result = super.start(delay);\n\n        if (result) {\n            this.forEach(item => {\n                item.start(0);\n            });\n        } else {\n            this.forEach(item => {\n                item.setPlayState(RUNNING);\n            });\n        }\n        return result;\n    }\n}\n\nexport default Scene;\n","import { IObject } from \"@daybrush/utils\";\nimport Scene from \"./Scene\";\nimport SceneItem from \"./SceneItem\";\nimport { SceneOptions, SceneItemOptions } from \"./types\";\n\nexport function animate(properties?: IObject<any>, options?: Partial<SceneOptions>) {\n    return new Scene(properties, options).play();\n}\nexport function animateItem(properties?: IObject<any>, options?: Partial<SceneItemOptions>) {\n    return new SceneItem(properties, options).play();\n}\n","import Scene, * as others from \"./index\";\n\nfor (const name in others) {\n    (Scene as any)[name] = (others as any)[name];\n}\n\nexport default Scene;\n"],"names":["cubic","y1","y2","t","t2","solveFromX","x1","x2","x","solveX","dx","Math","abs","bezier","func","between","easingName","steps","count","position","time","level","floor","STEP_START","STEP_END","LINEAR","EASE","EASE_IN","EASE_OUT","EASE_IN_OUT","PREFIX","DATA_SCENE_ID","TIMING_FUNCTION","ROLES","transform","filter","attribute","html","ALIAS","easing","FIXED","_a","MAXIMUM","THRESHOLD","DURATION","FILL_MODE","DIRECTION","ITERATION_COUNT","DELAY","EASING","PLAY_SPEED","EASING_NAME","ITERATION_TIME","PAUSED","ENDED","TIMEUPDATE","ANIMATE","PLAY","RUNNING","ITERATION","START_ANIMATION","PAUSE_ANIMATION","ALTERNATE","REVERSE","ALTERNATE_REVERSE","NORMAL","INFINITE","PLAY_STATE","PLAY_CSS","PREV_TIME","TICK_TIME","CURRENT_TIME","SELECTOR","TRANSFORM_NAME","EASINGS","NAME_SEPARATOR","OPTIONS","EVENTS","value","options","setOptions","isString","split","separator","newOptions","name","length","index","prefix","suffix","model","type","arr","map","v","PropertyObject","clone","join","toValue","forEach","splitStyle","str","properties","splitText","obj","totalLength","i","matches","trim","toPropertyObject","styles","arrayToColorObject","RGBA","stringToBracketObject","text","splitBracket","afterModel","COLOR_MODELS","indexOf","stringToRGBA","arrayToPropertyObject","stringToColorObject","result","isArray","values","splitComma","splitSpace","exec","charAt","toObject","object","size","get","isPropertyObject","setAlias","alias","setRole","names","isProperty","isFixedProperty","roles","fixed","getType","OBJECT","ARRAY","PROPERTY","STRING","NUMBER","isPureObject","isObject","constructor","Object","getNames","stack","push","concat","pop","slice","updateFrame","toFixed","num","round","getValueByNames","undefined","isInProperties","args","isLast","role","isRole","isFixed","setPlayCSS","item","isActivate","state","isPausedCSS","isPaused","isEndedCSS","isEnded","makeId","selector","id","random","IS_WINDOW","checkElement","$","getRealId","getId","setId","toId","match","playCSS","isExportCSS","playClassName","ANIMATION","getPlayState","className","addPlayClass","setTime","exportCSS","el","addAnimationEvent","setPlayState","duration","getDuration","isZeroDuration","isFinite","animationend","finish","animationstart","trigger","addEvent","animationiteration","once","removeEvent","elapsedTime","currentTime","iterationCount","setIteration","getEasing","curveArray","parseFloat","GetterSetter","getter","setter","parent","prototype","camelize","isDirectionReverse","iteration","iteraiontCount","direction","setters","getters","__extends","_super","_this","delay","fillMode","playSpeed","iterationTime","tickTime","prevTime","playState","setEasing","setDuration","getActiveDuration","Infinity","getTime","toTime","timerId","requestAnimationFrame","tick","start","cancelAnimationFrame","end","pause","isTick","isParent","activeDuration","getUnitTime","calculate","isDelay","getIterationTime","splitUnit","unit","passIterationCount","maxIterationCount","currentIterationTime","setIterationTime","isReverse","isFiniteDuration","isForwards","now","to","min","Animator","EventEmitter","toInnerProperties","orders","arrObj","keys","getKeys","sortOrders","replace","target","merge","from","FUNCTION","getValue","getPropertyName","OrderMap","set","_i","raw","orderMap","getObject","setObject","key","nextValue","children","gets","params","remove","self","firstParam","Frame","_set","has","stylesLength","isUndefined","frame","setOrderObject","frameProperties","cssObject","FILTER","TRANSFORM","toCSSObject","cssArray","clear","lastParam","add","dotArray","a1","a2","b1","b2","v1","dot","dotColor","color1","color2","value1","value2","model1","model2","colorModel","parseInt","dotObject","a1Type","type1","type2","isFunction1","isFunction2","v2","isNaN","dotNumber","dotValue","nextTime","prevValue","ratio","getNearTimeIndex","times","makeAnimationProperties","decamelize","addTime","splice","addEntry","entries","keytime","prevEntry","getEntries","states","nextEntries","intCount","ceil","currentDuration","lastTime","j","entry","divideTime","unshift","load","originalDuration","ratio_1","items_1","obj_1","time2","items","newFrame","elements","sceneId_1","element","setAttribute","SceneItem","eachTime","realTime","innerValue","value_1","getDelay","frames","hasFrame","getDirection","frameTime","needUpdate","getFrame","update","nameMap","updateFrameOrders","removeFrame","append","unshiftTime","firstFrame","prepend","isStartZero","isFunction","setElement","toArray","Element","style","targetFunc","attributes","html_1","innerHTML","cssText","toCSS","fromCSS","parentEasing","getNowFrame","temp","prevNameMap","pushKeys","nextMap","setFrame","toFrame","isAccurate","left","right","realEasing","hasName","nowEasing","getNowValue","prevFrame_1","prevOrderMap","keyframes","callback","setTarget","setSelector","playCondition","parentDuration","itemState","reversedStates","reverse","superParent","infiniteIndex","findIndex","finiteStates","reduce","prev","cur","find","timingFunction","selectors","sel","selectorCallback","preselector","peusdo","KEYFRAMES","_toKeyframes","css","styledInjector","destroy","styled","inject","getAnimationElement","original","pauseCSS","addClass","removeClass","endCSS","hasClass","clientWidth","usePrevValue","prevFrame","nextFrame","isUndefinedLeft","isUndefinedRight","indicies","max","lastEntry","getTotalDuration","getPlaySpeed","sceneDuration","setDelay","setItem","getOrders","parentStates","totalDuration","animtionElement","Scene","scene","newItem","isItFunction","animate","play","animateItem","others"],"mappings":"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"}